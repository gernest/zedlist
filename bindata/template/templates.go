// Code generated by go-bindata.
// sources:
// templates/auth/delete.html
// templates/auth/login.html
// templates/auth/register.html
// templates/base/docs.html
// templates/base/docs_index.html
// templates/base/home.html
// templates/base/jobs.html
// templates/base/jobs_view.html
// templates/base/landing.html
// templates/base/regions.html
// templates/base/regions_job.html
// templates/base/regions_paginate.html
// templates/dash/home.html
// templates/dash/jobs_new.html
// templates/dash/name_form.html
// templates/dash/new_job.html
// templates/dash/profile.html
// templates/errors/400.html
// templates/errors/404.html
// templates/errors/500.html
// templates/partials/common_header.html
// templates/partials/docs_index.html
// templates/partials/flash.html
// templates/partials/footer.html
// templates/partials/header.html
// templates/partials/job_list.html
// templates/partials/main_menu.html
// templates/partials/regions_list.html
// templates/partials/sidenav.html
// templates/partials/user.html
// templates/resume/home.html
// templates/resume/update.html
// templates/resume/view.html
// templates/test/base/footer.tpl
// templates/test/base/header.tpl
// templates/test/tmpl/hello.tmpl
// templates/test/tmpl/script.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authDeleteHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcf\x6e\xa3\x30\x10\xc6\xef\x79\x8a\x91\xef\x0b\xd2\x9e\x81\xd5\xaa\xc9\xad\xc7\xdc\x23\xc7\x1e\x60\x54\xdb\x83\xec\x31\x55\x84\x78\xf7\x0a\x42\x5a\xd2\xf6\x64\xcf\x9f\x4f\xbf\xcf\x33\x9e\x26\x41\x3f\x38\x2d\x08\x6a\xd0\x51\x48\xbb\x54\x1a\xf6\x9e\xc3\xa5\x47\x6d\x31\x16\xbd\x78\xa7\xa0\x98\xe7\x43\x65\x69\x04\xe3\x74\x4a\xb5\x82\x4c\xe0\xc9\x5a\x87\xa0\x1d\x75\x01\x2d\x18\x0c\x82\xf1\x33\xec\x22\x59\xd5\x1c\x00\x00\x9e\x84\x8e\x3b\x0a\x7f\x5a\x8e\x7e\xab\xae\x1d\xfd\xdf\xaf\xe0\x87\xc4\x70\x10\x0c\xa2\x9a\xff\x11\xe1\xc6\x19\x52\xde\x2e\xef\x3a\x08\x58\x06\x8b\x0e\x65\x4d\x45\xd0\xc6\x70\x0e\xf2\x0f\xaa\xd2\xd2\xb8\x63\x94\x7b\x48\xb5\x38\x00\x8f\xd2\xb3\xad\xd5\xc0\x49\xd4\x83\x97\x09\x9c\x8e\x1d\xc2\x37\x93\xab\x8c\xc2\x90\x05\xc8\xd6\x4a\xf8\x0d\x83\x02\xb9\x0d\x58\xab\x9e\xac\x5d\xa2\xa0\x3d\xd6\xca\xa4\xd8\x5e\xb6\xfa\xa8\x5d\xc6\x5a\x4d\x13\x14\x2f\x29\xb6\xe7\x25\x0b\xf3\xac\x1a\x98\xa6\x62\x21\x14\xc7\xd5\xfc\x3c\x3f\x83\xae\x59\x84\xc3\xc3\x53\xc0\x4e\x0b\x8d\xb8\xcc\xbd\x75\x99\xec\x66\x31\xe5\xab\x27\x81\x7b\xb3\x6a\xe0\x78\x7a\x3d\x9d\x4f\x55\x79\x4f\xec\x1f\xbf\xa0\xb6\x75\xdc\xe7\xb2\x1d\xbf\x7e\x81\x96\x59\xf6\xbb\xff\x08\x00\x00\xff\xff\x94\xff\xec\xe9\x28\x02\x00\x00")

func authDeleteHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authDeleteHtml,
		"auth/delete.html",
	)
}

func authDeleteHtml() (*asset, error) {
	bytes, err := authDeleteHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/delete.html", size: 552, mode: os.FileMode(420), modTime: time.Unix(1504342323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _authLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x4d\x6b\xc3\x30\x0c\xbd\xf7\x57\x08\xdd\x97\xc2\xce\x75\x61\xec\xda\xe3\xee\xc1\xd8\x4a\x22\xe6\x8f\x60\x2b\x81\x61\xfc\xdf\x87\x4b\xb6\x65\x69\x4f\xb6\xf4\xf4\xf4\x9e\xa4\x52\x84\xfc\xec\xb4\x10\xe0\xac\x93\xb0\x76\xf9\x6c\xa2\xf7\x31\xf4\x13\x69\x4b\xa9\x9b\xc4\x3b\x84\xae\xd6\xd3\xc5\xf2\x0a\xc6\xe9\x9c\x15\xc2\xc2\x60\x62\x10\xcd\x81\x12\x5e\x4f\x00\x00\x47\xdc\xb3\xb5\x8e\x40\x3b\x1e\x03\x59\x30\x14\x84\xd2\x6f\x38\x26\xb6\x1b\xf1\x81\xec\xe2\xc8\xe1\x65\x88\xc9\xef\x2a\xee\x55\xd3\xeb\xff\xc4\x03\xb5\x99\xa2\x20\x78\x2d\x45\x12\x74\x6f\x46\x78\xa5\x9b\x0e\x23\xe0\xbd\x6b\xdf\xba\xf6\xc2\xe2\x08\x6b\xbd\x9c\x2d\xaf\x07\x89\xf3\x51\xe3\xd2\x28\xe0\x49\xa6\x68\x15\xce\x31\x0b\xfe\xc8\x2d\x0c\x4e\xa7\x91\xe0\x89\xd7\x3b\x95\xc3\xbc\x08\xb0\x55\x28\xf1\x93\x02\x82\x7c\xcd\xa4\x70\x62\x6b\x5b\x14\xb4\x27\x85\x26\xa7\xa1\xdf\xf0\x55\xbb\x85\x14\x96\x02\xdd\x7b\x4e\xc3\x47\xcb\x42\xad\x78\x85\x52\xba\xa6\xd2\xdd\xda\x18\xb5\x1e\x4c\x37\x68\xb7\xcd\xbf\xb9\xb6\xef\xf6\x3c\x3d\xf8\x10\xa3\xec\x2f\xfd\x1d\x00\x00\xff\xff\x02\x95\x0a\x9c\x16\x02\x00\x00")

func authLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authLoginHtml,
		"auth/login.html",
	)
}

func authLoginHtml() (*asset, error) {
	bytes, err := authLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/login.html", size: 534, mode: os.FileMode(420), modTime: time.Unix(1504435282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _authRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xbd\x6a\xf4\x30\x10\xec\xef\x29\x96\xed\x3f\x1d\x7c\xf5\xe9\x20\xa4\x4d\x15\xd2\x1b\x21\xad\xed\x25\xfa\x31\xd2\xda\x10\x84\xde\x3d\xe8\xe2\x4b\x9c\x9f\x4a\x8c\x76\x66\x76\xa4\xa9\x55\x28\x2c\xde\x08\x01\x2e\x26\x0b\x1b\x5f\xce\x36\x85\x90\xe2\x30\x93\x71\x94\xd5\x2c\xc1\x23\xa8\xd6\x4e\x17\xc7\x1b\x58\x6f\x4a\xd1\x08\x2b\x43\x60\xe7\x3c\x81\xf1\x3c\x45\x72\x60\x29\x0a\xe5\x4f\x38\x65\x76\x78\x3d\x01\x00\x7c\x13\x66\x9a\xb8\x08\xe5\x7f\x63\xca\x61\x27\xdc\x48\xf3\xff\x2f\xf0\x4b\x65\x53\x14\x8a\x82\xd7\x5a\x25\x83\x7a\xb0\xc2\x1b\x3d\x99\x38\x01\xde\x0d\x87\x6e\x38\x08\x8b\x27\x6c\xed\x72\x76\xbc\x1d\xdc\xcf\x47\xfb\x4b\xa7\x42\x20\x99\x93\xd3\xb8\xa4\x22\x78\xdf\xb4\x32\x78\x93\x27\x82\x1f\xf1\x6e\x32\x8e\xcb\x2a\xc0\x4e\xa3\xa4\x57\x8a\x08\xf2\xb6\x90\xc6\x99\x9d\xeb\x28\x9a\x40\x1a\x6d\xc9\xe3\xb0\xcf\x37\xe3\x57\xd2\x58\x2b\xa8\xc7\x92\xc7\x97\x7e\x0b\xad\xe1\x15\x6a\x55\x7d\x83\x7a\xde\xd3\xb7\x76\xc8\xda\x27\xfb\xd7\x7d\x3c\x63\x3f\xfe\xac\x6b\x4c\x49\x8e\x3d\xbd\x07\x00\x00\xff\xff\x86\x28\x7e\x7c\xd4\x01\x00\x00")

func authRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authRegisterHtml,
		"auth/register.html",
	)
}

func authRegisterHtml() (*asset, error) {
	bytes, err := authRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/register.html", size: 468, mode: os.FileMode(420), modTime: time.Unix(1504435353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseDocsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x8e\xc3\x20\x0c\x45\xf7\x9c\xc2\x62\x9f\x70\x81\x99\xdc\xc5\xc5\xae\x82\x0a\x71\x04\x56\xaa\x0a\x71\xf7\x2a\x15\x55\xa9\x54\x6f\xbc\xf8\xcf\xdf\xaf\x56\xe5\xb4\x47\x54\x06\xbb\x63\xd6\x80\xb1\xb8\x95\x91\x38\xcf\xab\xa6\x68\x61\x6e\xcd\xfc\x51\x38\xc0\x47\x2c\xe5\xdf\x16\xf6\x1a\x64\xb3\x8b\x01\x00\x18\x13\x12\x3f\x7d\xa7\x2f\xe2\x6c\xf5\x91\xdf\x54\xc2\x7c\x23\xb9\x6f\xd3\x45\xe8\x31\x70\xe7\xd4\x9a\x08\x66\x12\xdf\xda\xe7\xde\xf5\x82\xfe\xd0\x51\x38\x16\x63\xfa\xfe\xe9\x7f\x15\xd1\xd1\xff\x19\x00\x00\xff\xff\x05\xc5\x15\xb5\xe5\x00\x00\x00")

func baseDocsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseDocsHtml,
		"base/docs.html",
	)
}

func baseDocsHtml() (*asset, error) {
	bytes, err := baseDocsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/docs.html", size: 229, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseDocs_indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x8e\xc3\x20\x0c\x45\xf7\x39\x85\xc5\x3e\x70\x81\x99\xdc\xc5\xc5\xae\x82\x0a\x71\x04\x56\xaa\x0a\x71\xf7\x2a\x15\x55\xa9\x54\x6f\xbc\xf8\xcf\xdf\xaf\x56\xe5\xb4\x47\x54\x06\xb3\x63\xd6\x80\xb1\xb8\x95\x91\x38\xdb\x55\x53\x34\x60\x5b\x9b\xfe\x28\x1c\xe0\x23\x96\xf2\x6f\x0a\x7b\x0d\xb2\x99\x65\x02\x00\x18\x13\x12\x3f\x7f\xa7\x2f\xe2\x6c\xf5\x91\xdf\x54\xc2\x7c\x23\xb9\x6f\xf3\x45\xe8\x31\x70\xe7\xd4\x9a\x08\x2c\x89\x6f\xed\x73\xef\x7a\x41\x7f\xe8\x28\x1c\xcb\xd4\xd7\x4f\xfd\xab\x88\x8e\xfa\xcf\x00\x00\x00\xff\xff\xf5\x34\xfe\xae\xe4\x00\x00\x00")

func baseDocs_indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseDocs_indexHtml,
		"base/docs_index.html",
	)
}

func baseDocs_indexHtml() (*asset, error) {
	bytes, err := baseDocs_indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/docs_index.html", size: 228, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xce\x4c\x53\xd0\xf3\x2c\xf6\xc9\x4f\x4f\x4d\xa9\xad\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\x4f\xce\xcf\xcd\xcd\xcf\x8b\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\x03\x2b\x4e\xcd\x29\x4e\x45\xd3\x95\x94\x58\x9c\xaa\x9f\x93\x98\x97\x92\x99\x97\x8e\xaa\x36\x0f\xa7\x05\x69\xf9\xf9\x25\xc8\x26\x03\x02\x00\x00\xff\xff\xe4\x34\x42\x1f\x96\x00\x00\x00")

func baseHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseHomeHtml,
		"base/home.html",
	)
}

func baseHomeHtml() (*asset, error) {
	bytes, err := baseHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/home.html", size: 150, mode: os.FileMode(420), modTime: time.Unix(1504342495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseJobsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\x83\x30\x0c\x40\xd1\x3d\xa7\xb0\xbc\x17\x2e\xd0\x72\x95\xca\x34\xae\x62\xe4\xc8\x08\x5b\x2c\x51\xee\xce\x9a\x21\xfb\xd7\xfb\xad\x05\xd7\x53\x29\x18\xf0\xa4\x2b\x84\xd4\xd7\xc2\x94\xf9\x5a\x4a\x54\x45\x58\x7a\x4f\xef\x2c\x37\xfc\x94\xdc\x3f\x78\xd8\xee\xaf\x62\x95\x71\x4b\x00\x00\x53\xe1\xb0\xfd\xab\xe2\x31\x1a\x6b\x96\x7b\x4b\xd3\xfc\x6f\x16\xe3\xf0\x09\x00\x00\xff\xff\x63\xff\xac\x43\x96\x00\x00\x00")

func baseJobsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseJobsHtml,
		"base/jobs.html",
	)
}

func baseJobsHtml() (*asset, error) {
	bytes, err := baseJobsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/jobs.html", size: 150, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseJobs_viewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6f\xa3\x30\x10\x85\xef\xfc\x8a\x91\x77\xaf\x60\x69\xf7\xb6\x02\xa4\x95\x72\xd9\x55\x8f\xbd\x57\x03\x9e\x04\x57\xc6\x46\x30\x21\x45\xae\xff\x7b\x05\x24\x4a\x42\x48\x1b\xf5\x86\x1f\xcf\xf2\xf7\xc6\x7e\xde\x33\xd5\x8d\x41\x26\x10\x0d\xb6\xac\xd1\x74\xb2\x22\x54\xd4\x26\x15\xd7\x46\x40\x12\x42\xe4\xfd\x4f\x83\x76\xf7\x27\x4b\xfe\x96\xac\x7b\x7a\x42\xbb\x0b\x21\x4a\x95\xee\xa1\x34\xd8\x75\x99\x78\x75\x45\x17\x57\xae\x26\x91\x47\x00\x00\xde\x1f\x34\x57\x90\xfc\x77\x45\x08\x93\xb2\x70\xc7\x9a\xa9\x3e\x9a\xa7\xdf\x8c\x85\xa1\xf3\x7a\xd6\x46\x94\xa5\xd6\x5e\x0b\x47\x23\x94\xce\x74\x0d\xda\x4c\xfc\x16\xb7\x86\xc9\x84\x50\xb5\xb4\xcd\x84\x1c\x61\x65\xaf\xe9\x20\xbd\x4f\xfe\x6d\x42\x10\x27\xb0\xad\xa1\xb7\x98\x35\x1b\x12\xb9\xf7\xc9\xf3\xf8\x15\x42\x2a\x71\xe5\x4c\xc9\xd5\x02\x4d\x2e\xd9\x46\xcf\x4a\x82\xc2\xa9\xe1\xb1\x54\xb9\xf7\xdc\xc2\x34\x7d\x10\x8a\x50\x19\x6d\x49\x84\xb0\x72\xfa\xbc\x43\x9d\xe7\xf0\x6b\x8a\xb0\x39\x6e\x7a\x57\xc8\x53\x14\x5e\xe2\xdc\x52\x3f\x02\xa3\xbb\x6e\x4f\xea\xa5\x18\x1e\xa7\xf9\xfc\x56\x7e\x08\xc8\xa1\xc6\x1d\x59\x76\xa0\x6d\x79\x6f\xe8\x2a\x8f\xbe\xc7\xaf\xee\x00\x14\x7b\x66\x67\x01\x78\x68\x28\x13\xf3\x4a\x5c\x65\xc5\xa6\x31\x43\x5c\xb0\x15\xe3\x00\x67\xc7\x3d\xb6\x2f\xd0\xe4\xe2\xf2\x53\x79\xf1\xee\x53\xa9\x74\x7f\xea\x0f\x59\x35\x76\x6c\x96\x56\x7b\xba\x75\x8e\x2f\x7b\xfa\x11\x00\x00\xff\xff\x71\xd7\xd8\x2a\xcd\x03\x00\x00")

func baseJobs_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseJobs_viewHtml,
		"base/jobs_view.html",
	)
}

func baseJobs_viewHtml() (*asset, error) {
	bytes, err := baseJobs_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/jobs_view.html", size: 973, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseLandingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\x16\xbc\xd7\x44\x72\x2c\x6c\x01\x39\x05\x28\x7a\xeb\x07\x14\x2b\x6a\x4d\x6e\xcb\x87\x40\xae\x9c\xb6\x82\xfe\xbd\xa0\x94\xc4\xb2\xa3\x00\x09\x72\xa2\xc4\x5d\xce\x0c\x67\x39\xe3\x28\x14\x7a\x8f\x42\xa0\x7a\xcc\xc2\xe8\x8b\x76\x84\x1d\xe5\x9d\x93\xe0\x15\xec\xa6\xe9\x66\xdf\xf1\x09\x8c\xc7\x52\x0e\x6a\x60\xe0\x78\xa2\x2c\xd4\x41\x5d\xd8\xa0\x87\x80\x45\xea\x29\x30\x14\x85\x32\xa0\x67\x1b\xa9\x83\x42\x36\x50\x14\xd5\xdc\x00\x00\x5c\xc1\x98\x14\x05\x39\x52\x7e\x2a\x6f\xb4\x78\xcc\x96\xa0\x90\x49\xb1\xc3\xfc\xf7\xcc\xdc\x27\x8e\xc2\xd1\x42\xa0\x38\xac\xce\xcf\x18\xf8\x8c\xc0\x42\x41\x81\xcb\x74\x3c\x28\xad\x9a\x71\x94\x0c\xbb\x7b\x23\x7c\xa2\xef\x18\x2d\x28\x97\x02\x7d\x69\x25\xaa\x69\xda\x6b\x7c\x17\xcc\xaf\xd4\x96\x4d\xac\x5a\xf8\x18\x96\x13\xe9\xcb\x57\xad\x2d\x8b\x1b\xda\x9d\x49\x41\x5b\xca\x91\x8a\xe8\x7f\xd4\x79\x2e\xa2\x40\xaa\x03\x72\x50\x3f\x5b\x8f\xf1\xb7\x6a\x1e\xe6\xde\xf7\x8a\xed\x92\xd9\x16\xeb\xc8\xf7\x6f\x8a\x5d\xcd\x20\xb3\x75\x02\x33\xe6\x65\xd3\x25\xe9\xfa\x51\xb4\x83\x48\x8a\x2f\x12\x70\x10\xa7\x7d\xb2\x1c\xb7\x74\x2c\x85\x0d\x11\x1f\xc3\xcf\x64\xb9\x48\x7d\x49\xaf\x29\x5e\x6a\x9f\x61\xf1\x18\xed\x80\x96\xf4\x38\x42\x79\x64\x31\x6e\x06\x5f\x11\x4d\x93\x6a\xf6\xfc\x0c\x35\x8e\x47\x8f\x57\x75\x98\xb7\x54\xb3\xd7\xdc\xbc\x36\x5d\x77\x7c\x5a\xe5\xe0\xfc\xbb\xfe\xbc\x4c\x87\xd0\x1f\xd9\x4e\x91\xbb\xdd\xba\xd3\x92\xeb\xab\x41\x3e\x90\x80\x38\x82\x65\xd2\x3d\xe5\x92\x22\x1c\x53\x9e\x37\xbf\xa5\x76\x25\xc9\xdd\xae\x29\xee\x9a\x7b\x70\x43\x68\x7d\x0d\xa8\x3f\x82\x4b\xa5\x92\x64\x32\x79\x60\xa9\xb1\x87\x42\xf9\xc4\x86\xf6\xda\xdd\xbd\x19\x71\x37\x58\x82\x3e\x73\xa8\xf9\x7e\x72\xbd\xa9\xa2\x7e\x08\xce\xaa\xcf\xa6\x2e\x12\x31\xe7\xf4\x08\x6c\x6a\xdf\x62\xe5\xb5\x55\xcb\xf2\x3f\x00\x00\xff\xff\x03\xf3\x81\x7f\xdb\x04\x00\x00")

func baseLandingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseLandingHtml,
		"base/landing.html",
	)
}

func baseLandingHtml() (*asset, error) {
	bytes, err := baseLandingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/landing.html", size: 1243, mode: os.FileMode(420), modTime: time.Unix(1504433908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseRegionsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xb0\xbc\xd3\x5e\x00\x7a\x15\x64\x11\x43\x2c\x39\xb8\x8a\xad\x2e\x51\xee\xce\xc2\x90\x21\xfb\x7b\xdf\xdf\x7b\x70\x3d\x95\x82\x01\x4f\x6a\x21\xa4\xbe\x17\xa6\xcc\x6d\x2b\x51\x15\x61\x1b\x23\xdd\xb3\x5c\xf0\x52\x72\x7f\x60\xe3\x8f\xd8\xd7\x6f\xc5\x2a\xe3\x91\x00\x00\x96\xc8\x7f\xf7\x54\xf1\x98\xa9\x3d\xcb\x75\xa4\xe5\xe5\x6d\x16\x73\xf7\x17\x00\x00\xff\xff\x3c\x24\xdf\x64\x9d\x00\x00\x00")

func baseRegionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegionsHtml,
		"base/regions.html",
	)
}

func baseRegionsHtml() (*asset, error) {
	bytes, err := baseRegionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions.html", size: 157, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseRegions_jobHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\x83\x30\x0c\x40\xd1\x3d\xa7\xb0\xbc\x17\x2e\xd0\x72\x95\xca\x34\x6e\x31\x32\x35\x8a\x2d\x96\x28\x77\x67\xcd\x90\xfd\xeb\xfd\x5a\x83\x8f\x53\x29\x18\xf0\xa4\x12\x42\xea\xf3\xc6\x94\xb9\x4c\x5b\x1c\x8a\x30\xb5\x96\x9e\x59\x2e\xf8\x28\xb9\xbf\xb0\xf0\x4f\xec\xef\x8f\xdd\x56\xc7\x25\x01\x00\x0c\x91\xdd\xd6\xb7\x8a\x47\xcf\xcc\x59\xae\x25\x0d\xf3\xaf\x59\xf4\xcf\x3b\x00\x00\xff\xff\x59\x63\xa1\x65\x99\x00\x00\x00")

func baseRegions_jobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegions_jobHtml,
		"base/regions_job.html",
	)
}

func baseRegions_jobHtml() (*asset, error) {
	bytes, err := baseRegions_jobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions_job.html", size: 153, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseRegions_paginateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\x83\x30\x0c\x40\xd1\x3d\xa7\xb0\xbc\x17\x2e\xd0\x72\x95\xca\x6d\x5c\x70\x65\x70\x14\x5b\x2c\x28\x77\x67\xcd\x90\xfd\xeb\xfd\xeb\x0a\xde\x8b\x52\x30\x60\xa1\x1a\x42\xea\xf3\xc6\x94\xb9\x4e\x5b\xec\x8a\x30\xb5\x96\x9e\x59\x4e\xf8\x2a\xb9\xbf\xb0\xf2\x2a\x76\xf8\xa3\xd0\x2a\x07\x05\xe3\x92\x00\x00\x86\xd0\xdf\x3e\x6f\x15\x8f\x9e\x9a\xb3\x9c\x4b\x1a\xe6\x3f\xb3\xe8\xbf\x77\x00\x00\x00\xff\xff\xa2\xfc\x6f\x1c\x9d\x00\x00\x00")

func baseRegions_paginateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegions_paginateHtml,
		"base/regions_paginate.html",
	)
}

func baseRegions_paginateHtml() (*asset, error) {
	bytes, err := baseRegions_paginateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions_paginate.html", size: 157, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x4a\x49\x2c\xce\xd0\xcd\xc8\xcf\x4d\x55\xb2\xe3\x52\x50\x50\x50\x00\xc9\x41\x58\x20\x80\x6c\x1e\x48\xa5\x7e\x5e\x6a\x79\x7c\x56\x7e\x12\x92\x61\x60\x4d\xfa\x70\x5d\x84\xf4\x27\xe6\xa6\xc6\xa7\xe5\x17\xe5\x62\x37\x01\x4a\x61\xf5\x46\x5a\x7e\x7e\x09\xb2\x37\x00\x01\x00\x00\xff\xff\x0b\x21\x2d\xf3\xec\x00\x00\x00")

func dashHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashHomeHtml,
		"dash/home.html",
	)
}

func dashHomeHtml() (*asset, error) {
	bytes, err := dashHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/home.html", size: 236, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashJobs_newHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\x83\x30\x0c\x40\xd1\x3d\xa7\xb0\xbc\x43\x2e\xd0\x72\x95\xca\xd4\xae\x12\x64\x30\xc2\x16\x0c\x28\x77\xaf\xba\x65\xe8\xfc\xa5\xff\xee\x3b\x64\xdd\x95\x42\x00\x77\x3a\xa2\x92\x7a\x2e\x42\x2c\xc7\x58\x62\x55\x84\xb1\xb5\xf4\xe0\x7a\xc2\x5b\xc9\xfd\x89\x4c\x5e\x86\xc5\x66\x1f\x36\xb9\x70\x4a\x00\x00\xfd\xe5\xd7\xf3\x26\xd7\x6b\xb1\xb9\x5f\x64\xae\xe7\x94\xfe\x7a\x1f\xb3\xe8\xbd\x6f\x00\x00\x00\xff\xff\x66\x4c\xa1\x89\x95\x00\x00\x00")

func dashJobs_newHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashJobs_newHtml,
		"dash/jobs_new.html",
	)
}

func dashJobs_newHtml() (*asset, error) {
	bytes, err := dashJobs_newHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/jobs_new.html", size: 149, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashName_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x41\x6b\xf4\x20\x10\x86\xef\xf9\x15\x22\xdf\xf5\x8b\xf7\xa2\x39\xb6\x14\xda\xb2\x50\x7a\x2e\xa6\x4e\x36\x42\xd4\xa0\x93\xa5\x4b\xc8\x7f\x2f\x46\x4b\xdd\x5d\x68\x28\xbb\x97\xe0\x8c\x93\xf7\x9d\x67\x64\xe6\x59\x77\xa4\x7e\x0c\x4f\x6e\x0f\x6a\x59\xaa\x79\xfe\x67\xa5\x81\x3b\x51\xbf\x05\xf0\xf5\x0e\x7c\x70\xf6\x45\x1a\x58\x96\x8a\x77\xce\x1b\x62\x00\x7b\xa7\x04\x1d\x5d\x40\x4a\xe4\x07\x6a\x67\x05\x65\x4a\x86\x9e\x8d\xde\x75\x7a\x00\x16\x25\x68\x53\x11\x42\x08\x47\xd9\x0e\x90\xce\x29\xee\x41\xaa\x32\xf6\x3f\x41\x2e\x68\x76\x49\x87\x44\xe3\xc0\x19\xf6\x45\x3d\x2b\x7f\x88\x77\x67\x72\xad\x53\xc7\x5f\xe5\x55\xc3\x07\xd9\xc2\x40\x3a\xe7\x05\xed\xb4\x0f\xf8\x3f\x35\x7c\x1f\xcf\xab\x29\x67\x6b\x49\x13\x0d\xd4\xa5\xc0\x49\x62\x4d\x6a\x3b\x4e\x48\xb4\x3a\x11\x24\xf1\x2b\xe8\x5e\x1f\xc0\xbe\xa7\x0c\x1e\x47\x10\x14\xe1\x13\x29\x39\xc8\x61\x02\x41\xf3\xc8\xeb\x87\x58\x96\x46\x4d\xcf\x2c\x4f\x9a\x38\x9b\xc0\x16\xe0\xea\x9e\x01\x9f\xb5\x52\x79\xac\x57\x10\x16\x8a\x99\xd0\xac\xba\xdb\x88\xc9\xff\xf6\x8c\x9d\x34\x7a\x38\x7e\xbf\xe2\x1a\x5c\xfd\x8c\x85\x64\xa6\x4c\xa9\x6d\xca\xd4\xc0\x6d\x28\x2f\x5b\x6c\x27\x44\x67\xb3\x7f\x98\x5a\xa3\x91\x36\xaf\xf2\x00\x9c\xa5\xab\x3f\x38\xb2\x62\x5b\x38\xcb\x9b\xca\x59\xdc\xf3\xa6\xaa\xe6\x19\xac\x5a\x96\xaf\x00\x00\x00\xff\xff\x60\x51\x4d\x21\x23\x04\x00\x00")

func dashName_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashName_formHtml,
		"dash/name_form.html",
	)
}

func dashName_formHtml() (*asset, error) {
	bytes, err := dashName_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/name_form.html", size: 1059, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashNew_jobHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4d\x6f\xdc\x20\x10\x86\xef\xfd\x15\x23\x94\x63\xb3\xdc\x2b\xf0\x25\x6a\x5a\xf5\xd0\x53\xef\x15\x98\x71\xcd\x96\x0f\x0b\xc6\x59\xad\x90\xff\x7b\x45\xec\xd4\x1f\xd9\x48\xeb\x8b\x79\x99\x99\xc7\xf3\xe2\x41\x74\x31\x79\xf0\x48\x7d\x34\x92\x0d\x31\x13\x03\xd5\x92\x8d\x41\x32\x6e\x54\xee\xf9\x39\xea\xcc\x03\x5e\x58\xf3\x09\x00\x40\x90\xd2\x0e\xe7\xf5\xac\x7b\x54\x66\xa7\x57\x51\x9f\xa7\x84\x8a\x10\x14\x04\xbc\xc0\x39\xea\x35\x93\x6f\x53\xab\x3a\x80\x74\x34\xd7\x8d\xb6\x61\x18\x09\xac\x91\x8c\xe2\x5f\x0c\x0c\xe8\x3a\xa0\x64\xbd\x35\xa6\xaa\xa0\x3c\x4a\xd6\xe6\xd4\xfd\x5e\xe2\x2f\xca\x8d\x28\x59\x29\x70\x7a\xca\xa9\xfb\x55\x77\x61\x9a\xd8\xca\x2c\xe5\x62\xa9\x87\xd3\x8f\xa8\x9f\x63\xf2\xd3\xb4\x89\x24\x15\xfe\x20\x3c\xd8\xcf\xf0\xd0\x59\x74\x06\xbe\x48\x38\x3d\xd7\x55\xde\xe4\x09\x4a\x7b\xbb\x82\xcc\x7e\xe3\x75\xd3\x29\x8d\xae\x29\xe5\xf5\xbd\x00\x4f\xdf\x90\x7e\x2a\x8f\xd3\x24\xf8\x1c\xdf\x83\xf8\x91\x74\x13\x5d\xca\xe0\x94\x0d\x6f\xcc\xef\xe4\xdd\xa6\xbd\xff\xa5\xc6\xbe\xbc\xaf\xdd\x19\xc5\xea\x14\x53\xaa\x3e\x17\xd8\xd7\x94\x62\xca\x37\x70\xab\x27\x68\x9d\xca\x59\xb2\xce\xa9\xdc\x3f\x62\x2d\x60\x4d\x29\x15\xf4\x81\xaf\xf5\xc3\x18\xcc\xad\x56\xf9\xbb\x5e\xf7\x47\x21\xf8\xf6\xcc\x8f\x98\xa3\xbe\xf3\x07\xe9\x91\x28\x86\x65\xa4\xf2\xa8\xbd\x25\xf6\xe6\x4d\x53\x00\x4d\xe1\x71\x48\xd6\xab\x74\x65\x4d\x3b\x8f\xf4\x39\x6a\xc1\xe7\xc2\xfb\xfb\x15\x7c\x33\xd7\x82\x2f\xb7\x49\xf0\x7a\x0f\x9b\x7f\x01\x00\x00\xff\xff\xb8\xde\x5c\x9d\x8e\x03\x00\x00")

func dashNew_jobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashNew_jobHtml,
		"dash/new_job.html",
	)
}

func dashNew_jobHtml() (*asset, error) {
	bytes, err := dashNew_jobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/new_job.html", size: 910, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dashProfileHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0a\xc3\x30\x0c\x85\xe1\xdd\xa7\x10\xde\x1b\x5f\xa0\xcd\x55\x8a\xa8\x14\x64\x90\xaa\x60\x89\x2c\x21\x77\x2f\xdd\x3c\x64\x7e\xbc\xff\x3b\xcf\x64\xdb\x15\x93\xa1\xee\x38\xb2\xa3\x46\x13\x46\xe2\xb1\x48\x9a\x56\x58\xae\xab\x3c\xa9\x1f\xf0\x51\x8c\x78\x55\xc2\x90\x87\xb8\x71\x5d\x0b\x00\xcc\x81\xff\xd4\xbe\x68\xfc\xde\x7c\xd8\xfc\x6f\xd4\x8f\xb5\xdc\x62\x9b\x7b\xce\xd8\x2f\x00\x00\xff\xff\x5b\x71\x21\x8f\x92\x00\x00\x00")

func dashProfileHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashProfileHtml,
		"dash/profile.html",
	)
}

func dashProfileHtml() (*asset, error) {
	bytes, err := dashProfileHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/profile.html", size: 146, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors400Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors400HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors400Html,
		"errors/400.html",
	)
}

func errors400Html() (*asset, error) {
	bytes, err := errors400HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/400.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsCommon_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xc2\xaa\x2a\x37\x31\x33\x2f\x3e\x37\x35\xaf\x14\x49\x21\x20\x00\x00\xff\xff\xc0\x81\x2a\x00\x4f\x00\x00\x00")

func partialsCommon_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsCommon_headerHtml,
		"partials/common_header.html",
	)
}

func partialsCommon_headerHtml() (*asset, error) {
	bytes, err := partialsCommon_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/common_header.html", size: 79, mode: os.FileMode(420), modTime: time.Unix(1504342313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsDocs_indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xc1\x4a\x05\x21\x14\xc6\xf1\xfd\x7d\x8a\x83\xb8\x2c\xdd\x87\x23\xb4\x0c\x2e\x2d\x82\x1e\xe0\xa4\xa7\x19\x6b\x3c\x82\x3a\x16\x88\xef\x1e\x45\x35\x13\xdd\xa5\xfe\xe0\x7c\x7f\xe3\x43\x03\xb7\x62\x29\x93\x28\xe4\x6a\x48\x2c\xec\x09\x00\xc0\x30\xfe\x4a\x24\xde\xbe\xbf\xbf\x08\x8f\x70\x1d\x2a\x45\x28\xb4\x92\xab\xe4\x05\x2c\x99\x9e\x27\xa1\x5f\xd2\x53\xd1\x99\xe6\x90\xb8\x08\xdb\x7b\xcd\xa0\x6e\x5d\x0d\x8d\xce\xc8\x33\x08\x9f\xdc\x16\x89\x6b\x11\x63\x18\x8d\xfb\xf5\xde\xdf\x42\x5d\x40\xf9\xe4\xee\xd8\xd3\xfb\x18\x07\xca\xc8\x33\x81\x7c\xbd\x92\xed\x66\x52\x07\xba\xd0\xf4\x93\xd2\xbb\x6c\xea\xf1\xe1\x3c\xc6\x67\x87\x6c\xea\x1e\x23\xfd\x1b\x25\xf6\x7f\x96\xf6\xb7\xd1\x8c\xcd\x9e\x8c\xf6\xa1\xd9\x8f\x00\x00\x00\xff\xff\x09\x35\x92\xa4\x31\x01\x00\x00")

func partialsDocs_indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsDocs_indexHtml,
		"partials/docs_index.html",
	)
}

func partialsDocs_indexHtml() (*asset, error) {
	bytes, err := partialsDocs_indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/docs_index.html", size: 305, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsFlashHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\x03\x31\x0c\x44\xef\xf9\x0a\xb1\xf8\x58\x9c\x7b\xc8\x06\x4a\xa1\xa7\xf6\x23\x54\xaf\xf0\x8a\xba\x32\xd8\xae\x7b\x10\xfa\xf7\xb2\x59\x27\x84\xf8\x66\x69\xe6\xcd\x20\x55\x17\x53\xfe\xc2\x74\x9a\xbd\x19\xa8\xfe\x71\x5b\xc1\xbf\x27\xac\xab\xd9\xe1\xbc\x70\x87\x90\xb0\xd6\x79\xfa\x65\x08\x59\x1a\xb2\x50\x99\x2e\x07\x00\x00\xd5\x82\x12\x09\xdc\xf7\x8b\xeb\xa7\x19\x3c\x98\x5d\x17\x4f\xbe\x1f\xaa\x15\x23\x41\x2b\x28\x95\x1b\x67\xd9\xbc\xae\xfb\xb7\x4d\x62\x36\x70\xcf\xce\x95\x70\xb9\x67\xdd\x9e\x6a\x2b\x30\x4a\xfb\xd7\xd0\xb8\xd3\x07\x4a\x04\xd7\xfd\xe7\x1e\x33\x3a\x5c\x69\xc7\x85\xfb\x03\x9c\x6f\xe8\x90\x72\x25\xe0\x90\x65\xba\x9c\x8f\xbc\x4b\x1e\xd4\xaa\x24\xcb\x76\x80\x7d\x34\xbe\xff\x01\x00\x00\xff\xff\xcb\xe1\x8b\x6a\x2e\x01\x00\x00")

func partialsFlashHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsFlashHtml,
		"partials/flash.html",
	)
}

func partialsFlashHtml() (*asset, error) {
	bytes, err := partialsFlashHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/flash.html", size: 302, mode: os.FileMode(420), modTime: time.Unix(1504340310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func partialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsFooterHtml,
		"partials/footer.html",
	)
}

func partialsFooterHtml() (*asset, error) {
	bytes, err := partialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/footer.html", size: 22, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbd\x4e\x2b\x31\x10\x85\xfb\x7d\x8a\xb9\xee\x63\xeb\x42\x43\xe1\xb5\x84\x02\x94\x90\x62\x29\xa8\x90\xf1\x4e\xb2\x4e\x6c\x27\x78\x26\x42\xc1\xf2\xbb\xa3\x64\x15\x41\x88\x84\x52\x59\xc7\xe7\xfb\xfc\xa3\xd1\xff\xee\x9e\xa6\xdd\xcb\xec\x1e\x06\x8e\xc1\x34\x7a\x5c\x1a\x3d\xa0\xed\x21\xd8\xb4\x68\x05\x26\x61\x1a\x00\x00\x1d\x91\x2d\xb8\xc1\x66\x42\x6e\xc5\x73\xf7\x30\xb9\x39\xa9\x92\x8d\xd8\x0a\x47\x79\xfe\xca\xeb\x15\x26\x01\x6e\x9d\x18\x13\xb7\xa2\x14\x39\xa5\x3c\xef\xf6\xdb\xb5\x0a\x50\x06\x4a\xf9\xf0\x3c\x80\x9c\xd9\x05\x76\x9e\x03\xd6\x3a\x9e\xc5\xfb\x60\x4a\x91\xb5\x6a\x35\x86\x43\x51\x0a\x06\x3a\xa7\x6e\x37\x9b\x47\x1b\xf1\x1c\x4e\xfd\x91\x0d\x3e\xad\x20\x63\x68\x05\xf1\x2e\x20\x0d\x88\x2c\x60\xc8\x38\x6f\x85\x22\xb6\xec\x9d\x72\x44\x8a\x30\xda\xc4\xde\xc9\xe8\x93\x74\x44\xc7\xdf\x5d\xea\x6f\xfd\x4f\x8b\x5c\xf6\x1b\x06\xca\xee\x9b\x5a\x92\x5a\xbe\x6f\x31\xef\x26\xd7\xf2\x4a\xfe\x3f\x5c\xb4\x24\x61\xb4\x1a\xe9\xbf\xd5\x93\xf7\x5d\xae\x7d\x62\x1f\x3c\xf1\x2f\x43\xab\xfd\x90\x4d\xa3\xdf\xd6\xfd\xce\x34\x5f\x01\x00\x00\xff\xff\x41\xa6\x5f\xe6\x0b\x02\x00\x00")

func partialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsHeaderHtml,
		"partials/header.html",
	)
}

func partialsHeaderHtml() (*asset, error) {
	bytes, err := partialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/header.html", size: 523, mode: os.FileMode(420), modTime: time.Unix(1504366994, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsJob_listHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x70\x5a\x8e\x8b\x05\x2c\xb7\xc2\x36\x30\xa0\x97\x02\x03\x76\xd9\x7d\x90\x2d\xc6\x52\xa7\x48\x86\xc5\x3a\x33\x34\xfd\xf7\xc1\x1f\xeb\x6c\xd4\x4e\x9b\xa1\xb9\xc4\xe2\x23\xc1\xf7\x1e\x25\x86\xb0\x37\xc2\x56\x77\x59\xf2\xa5\x24\xdd\xe2\x57\x61\xab\x18\x77\xa9\xd4\x2d\x94\x46\x78\x9f\x31\x8f\x25\x69\x67\x59\xbe\x03\x00\x98\x23\x8f\xae\x38\x18\xed\x69\x82\xfa\x5f\x08\x17\x4d\x0a\x92\x47\x57\xf8\x18\x67\xe1\x46\xd8\x0a\x61\xff\xf3\xd3\xbe\xbd\xcb\x92\x05\x34\x54\xec\xdb\x59\x6c\xad\x91\x26\x3c\xcf\x1a\x3d\xa7\x91\x28\x0c\xbe\x8c\x8f\x98\x42\x21\xb7\xb0\x66\x1d\x98\x0a\xa1\x74\xc6\xd7\xc2\x66\xec\xb8\xd2\x75\x91\x2c\x40\x35\x78\xca\x18\xef\x45\xf3\x56\xe3\x85\x87\x90\x3c\xdc\xc7\xc8\xfe\x0a\x38\x19\xfc\x75\x20\x4d\x06\x59\x1e\x42\xf2\xbd\xff\x8a\x31\xe5\xe2\x0a\x07\x4e\x6a\x83\x3a\xdf\xe2\xde\xd7\x5c\x51\x5c\x38\xd9\xfd\x9f\x1b\x79\x08\xd4\xc0\x70\x55\x80\x49\x14\xd2\x68\x8b\x2c\xc6\x2b\x2c\xc7\x4a\xf9\xcf\xc7\xcf\x83\xf4\xfb\xa9\xf8\xb7\x14\x34\x58\x40\x5b\x74\xb7\x55\xde\x42\x56\x7b\xff\x84\xf2\x47\xd1\xdd\xce\xf6\x6d\x53\xff\xc8\x20\x87\xb3\xa8\xd0\x92\x03\x6d\xcb\xd7\x86\x2a\xf3\xdd\xfb\xea\xdd\xf0\xef\x39\xa1\x78\x22\x72\x16\x80\xba\x1a\x33\x36\x9e\xd8\xc2\x23\x51\xd7\xa6\x3b\x14\x64\x59\x3f\x90\x31\xe3\x35\x0d\x37\x4a\xe0\x1b\x97\x2f\xe5\x2b\xef\x37\xe5\x52\xb7\xf3\x9d\x82\x56\x2e\x36\xc6\x8b\xb3\xf1\xb8\xb2\x3e\x56\xda\xa9\x63\xfe\xcd\xd5\xfe\x43\xca\xd5\x71\x05\xae\xf3\x07\x02\x8f\x78\xf6\x40\x0a\x1b\x04\xd1\x20\x58\x07\xfd\xcb\x86\x93\x6b\xc0\x2b\x77\x81\x0e\x29\x49\x79\xfd\x66\xd2\x13\x34\xfe\xfd\x09\x00\x00\xff\xff\xf0\xd8\x04\x3f\x72\x05\x00\x00")

func partialsJob_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsJob_listHtml,
		"partials/job_list.html",
	)
}

func partialsJob_listHtml() (*asset, error) {
	bytes, err := partialsJob_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/job_list.html", size: 1394, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsMain_menuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\x9b\x30\x10\x85\xef\xfd\x15\x23\xdf\x8b\xef\x15\x41\xea\xa5\x55\xa5\xfc\x87\xca\xc0\x60\xcf\xae\xb1\x91\x3d\x66\xa5\xb5\xfc\xdf\x57\x40\x12\x25\x59\xa2\x84\x0b\x88\xf7\xf4\xe6\xb3\xdf\xd4\x3d\xcd\xd0\x59\x15\xe3\x41\x24\x02\xab\x82\x46\x60\x3f\x01\x8c\xe8\x92\x68\x7e\x00\x00\xdc\x99\x3a\xef\x58\x91\xc3\x70\x92\x57\x8b\x3a\x1b\x88\x71\x14\x60\x02\x0e\x07\x21\x45\x93\x33\x07\xa8\x7e\x77\x4c\x33\x1e\x95\xd3\x20\x8c\x1f\xf1\x67\xcb\x4e\x94\x52\x4b\xf5\x34\xe2\xcd\xb7\x71\x37\x67\x11\x5e\xcf\x31\xcc\x53\xfc\x25\xa5\x26\x36\xa9\xad\x3a\x3f\x4a\x8d\xc1\x61\x64\xf9\x89\xbd\xa5\xc8\x02\x78\x39\x3d\x1f\xc4\xff\xd6\x2a\xf7\x2e\x9a\xbf\xab\xf7\x15\xc8\xde\x77\xfb\x90\x06\xed\xb4\x0b\x79\x75\xa5\x81\xb4\xe1\xeb\xfb\x3e\x3f\x39\xd3\x00\xd5\xbf\x78\xf4\x1a\xfb\x52\x20\x67\xc6\x71\xb2\x8a\x11\xc4\xa4\x02\x93\xb2\x51\xa6\x88\xa1\x32\x3c\x5a\x01\xd5\xea\x41\x1b\xb1\x94\x9b\xa0\x07\xd4\x2a\xb1\x91\xd6\x6b\x72\x7b\xe8\x9b\x70\xc7\xfd\x2c\x2d\xa0\xa6\xc8\xcb\x6a\x7c\x0f\xbc\x68\x5b\xe6\x82\xea\xfa\x87\xa4\x89\x80\xdc\x8c\x81\xb1\x87\x36\x31\x7b\x77\x99\x64\x95\xd3\x49\x69\x94\x39\x43\xfc\x20\xee\xcc\x3a\xe0\x6a\x58\x29\xa2\xa9\xe9\x1c\x95\xf3\x60\xd5\x9d\x0e\xeb\x2f\xd1\xd4\x92\x9a\xdb\x66\x64\x4f\xf3\x69\xef\xb7\xcf\xd3\x6b\x6b\xe3\x8f\x55\xd1\x3c\xea\x62\x58\xc4\xdb\x32\x96\x13\x7e\x05\x00\x00\xff\xff\xf6\xa0\x5f\xe4\x65\x03\x00\x00")

func partialsMain_menuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsMain_menuHtml,
		"partials/main_menu.html",
	)
}

func partialsMain_menuHtml() (*asset, error) {
	bytes, err := partialsMain_menuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/main_menu.html", size: 869, mode: os.FileMode(420), modTime: time.Unix(1504433990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsRegions_listHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x4e\xeb\x30\x10\x45\xf7\xfd\x8a\x79\x51\x96\xaf\xf1\xa2\xbb\x2a\xa9\xc4\x12\x09\xc1\x82\x2f\x70\x93\x49\x3c\xd4\xb5\x2b\xcf\x34\x05\x59\xfe\x77\xa4\xd6\x85\x36\x50\xc4\x82\xed\x99\xc9\xcd\xf1\xdc\x18\x4b\xab\xdd\xb0\x6c\xaa\xbb\x56\x68\xc4\x07\xed\x86\x94\x66\x75\x47\x23\xb4\x56\x33\x37\x05\x63\x2b\xe4\x5d\xb1\x9a\x01\x00\xc4\x78\x20\x31\x50\x05\x1c\xc8\x3b\x4e\x29\xd3\xa0\xdd\x80\x50\x6e\xfe\x97\xe3\xb2\xa9\x32\xbe\x1d\x73\x9c\xee\xed\x79\xd8\x93\x15\x0c\x73\x4b\x2c\x17\x0b\xc7\x25\x4b\xd7\xe0\x08\x35\x98\x80\x7d\x53\xa8\x17\xbf\x66\x95\x5d\x54\x8c\xe5\x58\x3d\x1b\x1f\x24\xa5\x62\x12\x4d\x82\x5b\x60\xb4\xd8\x0a\x76\xc5\xd7\xc8\xd3\x2b\xca\xb1\x7a\xd4\x5b\xcc\xfa\x57\xbf\x54\x7a\x22\xa6\xa6\x66\x7f\xa9\xfa\x93\x61\xfe\xec\xb7\x8a\x9f\xf7\x56\x7b\x7b\x5a\xa8\x55\x47\xe3\xb9\x4f\x74\xdd\x47\x8b\x68\x19\xbf\xe9\x6e\x6d\xb5\xdb\xb0\xd5\x82\x60\x34\xcf\x7b\x7a\xc5\x6e\x7e\xa0\x4e\xcc\x65\x9d\x66\xb1\x7a\xf2\x3b\xfe\x57\x2b\xb3\xb8\xc0\xbb\xd5\xbd\x00\x23\x6e\x19\xc4\x60\x40\xd0\x01\xc1\x79\xc8\xa7\x80\xde\x07\x60\xe3\x0f\xf0\x86\x52\xd5\x6a\x77\x53\xf1\x84\xde\x03\x00\x00\xff\xff\x02\xeb\x08\xb3\xb2\x02\x00\x00")

func partialsRegions_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsRegions_listHtml,
		"partials/regions_list.html",
	)
}

func partialsRegions_listHtml() (*asset, error) {
	bytes, err := partialsRegions_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/regions_list.html", size: 690, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsSidenavHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\xcc\x5e\x73\x81\x34\x20\xb8\xd4\x43\x8c\xc9\x58\x47\xda\x29\x64\x62\x84\x96\xde\x5d\x10\x2d\x2e\xc4\x85\xdb\xf7\xf1\x7e\x9f\xa4\x42\xec\xc9\xac\x45\xe3\x58\x64\x54\x0c\x0d\x00\x80\x57\x5a\x65\x60\xbd\xbd\xe6\x27\xd1\x27\x6c\xa4\xf0\x00\xc6\x3d\xc7\xc2\x09\xe1\x92\xf9\xdc\xa2\xbb\x8e\x27\x73\x99\x3b\x19\xd5\x30\xcc\x73\xc9\xb0\xdd\xc5\x22\x95\x0f\xa4\x1d\xe0\x9b\x96\xc5\x3b\xfa\xd9\xfe\x9a\x74\xc3\x44\x18\x8e\x77\xd2\x89\xfe\x0b\x24\xca\x18\xf6\x94\x6d\xbd\x7b\xa7\x54\x43\xe3\x5d\x92\x1a\x1e\x01\x00\x00\xff\xff\x0a\x14\xb5\x42\x1a\x01\x00\x00")

func partialsSidenavHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsSidenavHtml,
		"partials/sidenav.html",
	)
}

func partialsSidenavHtml() (*asset, error) {
	bytes, err := partialsSidenavHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/sidenav.html", size: 282, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _partialsUserHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xc1\x4e\xc3\x30\x0c\x86\xef\x3c\x85\x95\x07\x68\x5e\xa0\xab\xc4\x1d\x21\x2e\x9c\x91\x9b\x98\xd5\xa3\xb5\x51\xe2\x74\x48\xd3\xde\x1d\xb5\xb4\x68\x12\x9d\x00\x21\x2e\xed\xe1\x8b\x3f\xff\x76\x52\x47\x1e\x21\xf4\x98\xf3\xce\x15\x06\x88\x49\x5f\xa3\x1e\x05\x7a\x96\x17\x60\xa3\xc1\x35\x37\x00\x00\x97\x07\x8d\xde\xcc\x35\xa7\x93\x25\xa8\x6e\x83\xf1\x48\x77\x28\x7b\x70\x42\x47\x77\x3e\xd7\x3e\xf2\xb8\x14\xf1\x5a\xf2\xe9\xe5\xa0\xe2\x9a\xda\xf3\x57\xed\x40\x52\x96\x6e\x33\xc2\x15\xcc\x31\xa0\x4b\xf4\xbc\x73\xfe\xa0\x6d\xf6\x53\xa7\x8d\x00\x07\x6d\xe7\x00\xf8\xad\x25\x51\x2e\x03\x5d\xf3\x7c\xd0\x4b\xd5\x32\xd4\xfa\xfb\xcb\xd6\xaa\xc7\x4c\xa9\x7a\xa0\x94\x55\xee\x71\xa0\x6a\xfa\xfc\xfb\xda\x22\xe6\xce\x6f\xcd\x3a\x81\x56\x31\xc5\x1f\x6e\x0e\x8b\x75\xbe\xd7\xbd\x96\xcd\x37\xb0\x90\x5f\xb8\x22\xf5\x64\xb4\x19\x6d\x26\x4f\x18\x82\x16\xb1\xab\xd7\xf1\x1e\x00\x00\xff\xff\x21\x3b\x74\x33\xc4\x02\x00\x00")

func partialsUserHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsUserHtml,
		"partials/user.html",
	)
}

func partialsUserHtml() (*asset, error) {
	bytes, err := partialsUserHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/user.html", size: 708, mode: os.FileMode(420), modTime: time.Unix(1504455380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resumeHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x0a\x0a\x0a\x36\xb9\xa9\x25\x89\x0a\xc9\x19\x89\x45\xc5\xa9\x25\xb6\x4a\xa1\x21\x6e\xba\x16\x30\xa9\x92\xcc\x92\x9c\x54\x3b\x1b\x7d\x08\xcd\x65\xa3\x0f\x32\xc0\x8e\xcb\x26\x29\x3f\xa5\xd2\x8e\x8b\xcb\x46\x1f\xc2\xb0\xd1\x07\x9b\x0f\x08\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeHomeHtml,
		"resume/home.html",
	)
}

func resumeHomeHtml() (*asset, error) {
	bytes, err := resumeHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/home.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resumeUpdateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x0a\x0a\x0a\x36\xb9\xa9\x25\x89\x0a\xc9\x19\x89\x45\xc5\xa9\x25\xb6\x4a\xa1\x21\x6e\xba\x16\x30\xa9\x92\xcc\x92\x9c\x54\x3b\x1b\x7d\x08\xcd\x65\xa3\x0f\x32\xc0\x8e\xcb\x26\x29\x3f\xa5\xd2\x8e\x8b\xcb\x46\x1f\xc2\xb0\xd1\x07\x9b\x0f\x08\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeUpdateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeUpdateHtml,
		"resume/update.html",
	)
}

func resumeUpdateHtml() (*asset, error) {
	bytes, err := resumeUpdateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/update.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resumeViewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x0a\x0a\x0a\x36\xb9\xa9\x25\x89\x0a\xc9\x19\x89\x45\xc5\xa9\x25\xb6\x4a\xa1\x21\x6e\xba\x16\x30\xa9\x92\xcc\x92\x9c\x54\x3b\x1b\x7d\x08\xcd\x65\xa3\x0f\x32\xc0\x8e\xcb\x26\x29\x3f\xa5\xd2\x8e\x8b\xcb\x46\x1f\xc2\xb0\xd1\x07\x9b\x0f\x08\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeViewHtml,
		"resume/view.html",
	)
}

func resumeViewHtml() (*asset, error) {
	bytes, err := resumeViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/view.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testBaseFooterTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xcb\xcf\x2f\x49\x2d\xb2\xe3\xe2\xcc\xad\x54\x80\xb0\xb9\x6c\xf4\x61\x82\x36\xfa\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x4d\x7a\xea\x59\x25\x00\x00\x00")

func testBaseFooterTplBytes() ([]byte, error) {
	return bindataRead(
		_testBaseFooterTpl,
		"test/base/footer.tpl",
	)
}

func testBaseFooterTpl() (*asset, error) {
	bytes, err := testBaseFooterTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/base/footer.tpl", size: 37, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testBaseHeaderTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xe3\xe2\xac\xae\xce\x4c\x53\xd0\x0b\xc9\x2c\xc9\x49\xad\xad\xb5\x29\x01\xd1\x76\xd5\xd5\x70\x01\x7d\x98\x48\x6a\x4e\x31\x42\x41\x55\x6a\x4a\x4e\x66\x71\x09\x92\x6c\x5e\x4a\x6d\x2d\x97\x8d\x3e\xd8\x50\x40\x00\x00\x00\xff\xff\x4b\x87\xdd\x59\x62\x00\x00\x00")

func testBaseHeaderTplBytes() ([]byte, error) {
	return bindataRead(
		_testBaseHeaderTpl,
		"test/base/header.tpl",
	)
}

func testBaseHeaderTpl() (*asset, error) {
	bytes, err := testBaseHeaderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/base/header.tpl", size: 98, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmplHelloTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0a\x43\x21\x0c\x06\xe0\xdd\x53\x84\xec\xad\xb8\x8b\x77\x51\x9a\x92\x41\xab\xe8\x0f\x1d\x42\xee\xfe\x96\x37\xbe\x0b\x7c\x66\x90\xb1\x7a\x85\x10\x43\x0e\x62\xab\x47\xa2\x4a\xfd\xc8\x7e\x63\x75\x76\x0f\x59\x53\x31\xc3\x26\x3e\x7f\x26\xd6\x39\xe4\xd5\xf0\x63\xf7\x1c\x35\x95\xf0\x6c\x7c\xe7\xc4\x6d\x90\xfb\x15\x00\x00\xff\xff\xb9\x00\x9d\x33\x68\x00\x00\x00")

func testTmplHelloTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmplHelloTmpl,
		"test/tmpl/hello.tmpl",
	)
}

func testTmplHelloTmpl() (*asset, error) {
	bytes, err := testTmplHelloTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/tmpl/hello.tmpl", size: 104, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmplScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\x4e\x2e\xca\x2c\x28\xb1\xb3\xd1\x87\x32\x00\x01\x00\x00\xff\xff\x1b\x99\x48\xfe\x11\x00\x00\x00")

func testTmplScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_testTmplScriptHtml,
		"test/tmpl/script.html",
	)
}

func testTmplScriptHtml() (*asset, error) {
	bytes, err := testTmplScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/tmpl/script.html", size: 17, mode: os.FileMode(420), modTime: time.Unix(1503401626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auth/delete.html": authDeleteHtml,
	"auth/login.html": authLoginHtml,
	"auth/register.html": authRegisterHtml,
	"base/docs.html": baseDocsHtml,
	"base/docs_index.html": baseDocs_indexHtml,
	"base/home.html": baseHomeHtml,
	"base/jobs.html": baseJobsHtml,
	"base/jobs_view.html": baseJobs_viewHtml,
	"base/landing.html": baseLandingHtml,
	"base/regions.html": baseRegionsHtml,
	"base/regions_job.html": baseRegions_jobHtml,
	"base/regions_paginate.html": baseRegions_paginateHtml,
	"dash/home.html": dashHomeHtml,
	"dash/jobs_new.html": dashJobs_newHtml,
	"dash/name_form.html": dashName_formHtml,
	"dash/new_job.html": dashNew_jobHtml,
	"dash/profile.html": dashProfileHtml,
	"errors/400.html": errors400Html,
	"errors/404.html": errors404Html,
	"errors/500.html": errors500Html,
	"partials/common_header.html": partialsCommon_headerHtml,
	"partials/docs_index.html": partialsDocs_indexHtml,
	"partials/flash.html": partialsFlashHtml,
	"partials/footer.html": partialsFooterHtml,
	"partials/header.html": partialsHeaderHtml,
	"partials/job_list.html": partialsJob_listHtml,
	"partials/main_menu.html": partialsMain_menuHtml,
	"partials/regions_list.html": partialsRegions_listHtml,
	"partials/sidenav.html": partialsSidenavHtml,
	"partials/user.html": partialsUserHtml,
	"resume/home.html": resumeHomeHtml,
	"resume/update.html": resumeUpdateHtml,
	"resume/view.html": resumeViewHtml,
	"test/base/footer.tpl": testBaseFooterTpl,
	"test/base/header.tpl": testBaseHeaderTpl,
	"test/tmpl/hello.tmpl": testTmplHelloTmpl,
	"test/tmpl/script.html": testTmplScriptHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"auth": &bintree{nil, map[string]*bintree{
		"delete.html": &bintree{authDeleteHtml, map[string]*bintree{}},
		"login.html": &bintree{authLoginHtml, map[string]*bintree{}},
		"register.html": &bintree{authRegisterHtml, map[string]*bintree{}},
	}},
	"base": &bintree{nil, map[string]*bintree{
		"docs.html": &bintree{baseDocsHtml, map[string]*bintree{}},
		"docs_index.html": &bintree{baseDocs_indexHtml, map[string]*bintree{}},
		"home.html": &bintree{baseHomeHtml, map[string]*bintree{}},
		"jobs.html": &bintree{baseJobsHtml, map[string]*bintree{}},
		"jobs_view.html": &bintree{baseJobs_viewHtml, map[string]*bintree{}},
		"landing.html": &bintree{baseLandingHtml, map[string]*bintree{}},
		"regions.html": &bintree{baseRegionsHtml, map[string]*bintree{}},
		"regions_job.html": &bintree{baseRegions_jobHtml, map[string]*bintree{}},
		"regions_paginate.html": &bintree{baseRegions_paginateHtml, map[string]*bintree{}},
	}},
	"dash": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{dashHomeHtml, map[string]*bintree{}},
		"jobs_new.html": &bintree{dashJobs_newHtml, map[string]*bintree{}},
		"name_form.html": &bintree{dashName_formHtml, map[string]*bintree{}},
		"new_job.html": &bintree{dashNew_jobHtml, map[string]*bintree{}},
		"profile.html": &bintree{dashProfileHtml, map[string]*bintree{}},
	}},
	"errors": &bintree{nil, map[string]*bintree{
		"400.html": &bintree{errors400Html, map[string]*bintree{}},
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"partials": &bintree{nil, map[string]*bintree{
		"common_header.html": &bintree{partialsCommon_headerHtml, map[string]*bintree{}},
		"docs_index.html": &bintree{partialsDocs_indexHtml, map[string]*bintree{}},
		"flash.html": &bintree{partialsFlashHtml, map[string]*bintree{}},
		"footer.html": &bintree{partialsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{partialsHeaderHtml, map[string]*bintree{}},
		"job_list.html": &bintree{partialsJob_listHtml, map[string]*bintree{}},
		"main_menu.html": &bintree{partialsMain_menuHtml, map[string]*bintree{}},
		"regions_list.html": &bintree{partialsRegions_listHtml, map[string]*bintree{}},
		"sidenav.html": &bintree{partialsSidenavHtml, map[string]*bintree{}},
		"user.html": &bintree{partialsUserHtml, map[string]*bintree{}},
	}},
	"resume": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{resumeHomeHtml, map[string]*bintree{}},
		"update.html": &bintree{resumeUpdateHtml, map[string]*bintree{}},
		"view.html": &bintree{resumeViewHtml, map[string]*bintree{}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.tpl": &bintree{testBaseFooterTpl, map[string]*bintree{}},
			"header.tpl": &bintree{testBaseHeaderTpl, map[string]*bintree{}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"hello.tmpl": &bintree{testTmplHelloTmpl, map[string]*bintree{}},
			"script.html": &bintree{testTmplScriptHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

