// Code generated by go-bindata.
// sources:
// templates/auth/date_picker.html
// templates/auth/login.html
// templates/auth/register.html
// templates/base/docs.html
// templates/base/docs_index.html
// templates/base/home.html
// templates/base/jobs.html
// templates/base/regions.html
// templates/base/regions_job.html
// templates/base/regions_paginate.html
// templates/dash/home.html
// templates/dash/jobs_new.html
// templates/dash/name_form.html
// templates/dash/new_job.html
// templates/dash/profile.html
// templates/errors/400.html
// templates/errors/404.html
// templates/errors/500.html
// templates/partials/docs_index.html
// templates/partials/flash.html
// templates/partials/footer.html
// templates/partials/header.html
// templates/partials/job_list.html
// templates/partials/regions_list.html
// templates/partials/sidenav.html
// templates/resume/home.html
// templates/resume/update.html
// templates/resume/view.html
// templates/test/base/footer.tpl
// templates/test/base/header.tpl
// templates/test/tmpl/hello.tmpl
// templates/test/tmpl/script.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authDate_pickerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\xc1\x4e\x85\x30\x10\x45\xf7\xef\x2b\x9a\x6a\xf2\x20\xd1\x36\xea\x4e\xc1\x3f\xf0\x03\x5c\xd6\x32\xa4\xe5\x95\x82\x33\x53\x23\x31\xfe\xbb\x14\x14\x62\xa2\x8b\x37\x9b\x36\x73\xcf\xcd\xbd\x53\x05\x1f\x4f\x02\x21\xd4\x92\x78\x0a\x40\x0e\x80\xa5\x70\x08\x6d\x2d\x35\xb1\x61\x6f\x75\x63\x18\x34\x3b\xe8\x81\x74\x03\xad\x49\x81\x55\xde\x29\x4b\x24\x1f\x0f\x15\x59\xf4\x23\x0b\x42\xbb\x7b\x3a\xd2\xdd\x6b\x02\x9c\xae\x6f\xd5\x8d\xba\x53\xbd\x8f\xaa\x9b\xe9\x4a\xaf\xf4\x3f\xb6\x25\x6a\xf4\xf6\x04\x78\x2e\xbe\x34\xfa\xed\xd9\x4c\x3c\x8d\x50\x4b\x86\x77\xd6\x9d\x79\x33\xeb\x76\xae\x2e\xe6\xb9\x2c\x9a\xc1\xa6\x1e\x22\x97\x0a\xc1\x34\x53\xd1\xa6\x68\xd9\x0f\x51\x14\xa5\xf8\x58\x98\x95\x3b\x5e\xbc\x78\x64\x97\x83\x8e\xa5\xca\xb1\x26\xff\x8b\x9d\xc9\x43\x10\xc0\xf2\x33\x18\xa4\x7b\xc1\x98\xe0\xea\x0f\xf9\x69\x88\xec\xbe\xf5\x4d\xfe\x2c\x1f\x0e\x3f\xef\x76\xc4\x57\x00\x00\x00\xff\xff\x11\xcb\x1d\x41\xa2\x01\x00\x00")

func authDate_pickerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authDate_pickerHtml,
		"auth/date_picker.html",
	)
}

func authDate_pickerHtml() (*asset, error) {
	bytes, err := authDate_pickerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/date_picker.html", size: 418, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _authLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x6e\xa3\x30\x10\xbd\xf3\x15\x96\x95\xe3\x06\xee\x2b\x40\x5a\xad\x9a\xf6\xd4\x53\xef\x95\x89\x87\x60\xd5\xd8\xc8\x0c\xa9\x22\x8b\x7f\xef\x18\x48\x42\x02\xa9\x94\x48\x91\xf1\x8c\xe7\xf9\xcd\x7b\x1e\xef\x11\xea\x46\x0b\x04\xc6\x1b\xe1\x50\x09\xdd\x26\x15\x08\x09\x2e\xae\xb0\xd6\x9c\xc5\x7d\x1f\xa5\x52\x1d\xd9\x5e\x8b\xb6\xcd\xb8\xb6\x07\x65\x78\x1e\x31\xfa\xa5\xa5\x75\x35\xab\x01\x2b\x2b\x33\xde\xd8\x16\xa7\xc4\x90\x54\xa6\xe9\x90\x29\xca\xa0\xfd\x02\xc3\x19\x9e\x1a\xc8\x78\xa5\xa4\x0c\x3b\x23\x6a\xda\xed\x5b\x57\x7e\x4e\xf9\xa3\xd0\x1d\x85\xbc\x67\xf1\x7f\x0a\x7f\x84\x28\xeb\xfb\x19\xa6\xf7\xdf\x0a\x2b\x16\xff\xeb\xb0\xda\xd1\xdd\xc4\xed\x72\x1d\x8a\x42\xc3\xf5\xe8\x78\xdc\x09\x73\x00\xb6\x51\x7f\xd8\xa6\x54\xa0\x25\xfb\x9b\xb1\x78\x17\xbe\xda\x59\xed\x58\xef\x6e\x8b\xc7\xa0\x5c\x06\x87\x84\x16\x05\xe8\xdc\xfb\x61\x9d\xc0\xe3\x57\xc0\x77\xea\xaa\xef\xd3\x64\xcc\x2f\x01\x93\x35\xc4\x87\xd7\x78\x4f\xde\x28\x73\xc6\x7f\x23\x47\xee\x68\x5f\x20\xc8\xa2\x75\x8c\x1b\x21\x20\x28\x01\xce\x05\x1d\x26\xd0\x17\xe7\xac\xbb\x57\x63\xd9\xeb\xd9\xff\x92\x96\x6a\x0b\xa1\x88\x53\xff\x01\xec\x97\x7e\xaf\x04\xc0\xc8\x47\xd4\x93\x55\xee\x4b\xa9\x28\xe2\xee\x0d\x5e\xc2\x3e\x69\x64\xd1\x21\x5a\x33\xbd\xcd\xb6\x2b\x6a\x85\xfc\xdc\x6b\x81\x86\xd1\x7f\xdb\x38\x55\x0b\x77\xe2\xf9\xf0\xf8\xd3\x64\xac\x79\x9e\x32\xed\x6e\x1f\xe9\x9c\x7f\x9a\x84\x69\xca\xa3\x68\xd2\x63\x75\x34\x4b\x6b\x71\x3e\x9a\x3f\x01\x00\x00\xff\xff\xe4\x3d\xf5\xd9\xc0\x03\x00\x00")

func authLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authLoginHtml,
		"auth/login.html",
	)
}

func authLoginHtml() (*asset, error) {
	bytes, err := authLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/login.html", size: 960, mode: os.FileMode(420), modTime: time.Unix(1438068642, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _authRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x41\x6f\xa3\x30\x10\x85\xef\xf9\x15\x23\x2b\xc7\x0d\xdc\x57\x80\xb4\x5a\x35\xed\xa9\xa7\xde\x2b\x13\x86\x60\xd5\xd8\x68\x3c\xa4\x8a\x2c\xfe\x7b\xc7\x09\x28\xa4\x09\x12\x32\x9e\xf7\x3c\xfe\x34\xbc\x18\x19\xfb\xc1\x6a\x46\x50\x83\x26\x36\xda\x86\xbc\x43\xdd\x20\x65\x1d\xf7\x56\x41\x36\x4d\x9b\xa2\x31\x27\x38\x58\x1d\x42\xa9\x08\x8f\x26\x30\x92\xaa\x36\x20\x4f\xd1\x7a\xea\xa1\x47\xee\x7c\x53\xaa\xc1\x07\x9e\x85\x8b\x68\xdc\x30\x32\x18\x51\xd8\x7f\xa1\x53\xc0\xe7\x01\x4b\xd5\x99\xa6\x49\x3b\xa7\x7b\xd9\x1d\x02\xb5\x9f\xb3\x7e\xd2\x76\x94\x52\x8c\x90\xfd\x97\xf2\x47\xaa\xc2\x34\xad\x7a\xc6\xf8\x6d\xb8\x83\xec\xdf\xc8\xdd\x5e\xee\x16\xbc\x9b\x44\xda\x1d\x11\xb6\xe6\x0f\x6c\x5b\x83\xb6\x81\xbf\x25\x64\xfb\xf4\x15\x56\xbe\xc2\xea\x1a\x6d\x15\xe3\x65\x9d\xad\xd9\x2b\xf2\xbb\xf0\x4c\x53\x91\x5f\xf5\x55\x5f\x99\x90\x71\x8b\xf1\x4d\xe6\xb2\xee\x26\xc3\xb9\x79\xef\x38\x30\x81\x20\x51\xc2\x98\x0f\xbf\x10\x79\x5a\xc3\xdc\x80\x96\x09\xb7\xb2\x74\x3b\x4c\x46\x25\x90\xa9\xc1\x13\xa8\xeb\x45\xe8\x9a\x35\x4a\x7e\xc7\xf2\x5b\x7e\xb0\x3f\x90\x17\xf5\xc8\xec\xdd\xfc\x9b\xc2\x58\xf7\x86\xd5\xc2\x55\xb3\x03\x79\x77\x03\x99\x5e\xd3\x59\x55\x4b\x14\x8a\xfc\x7a\xac\x7a\x06\x52\xe4\x29\x21\xd5\x66\x2e\x3d\x0d\x5c\xeb\x3d\xaf\x03\xf7\x13\x00\x00\xff\xff\x51\xb5\x37\xcf\x96\x02\x00\x00")

func authRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authRegisterHtml,
		"auth/register.html",
	)
}

func authRegisterHtml() (*asset, error) {
	bytes, err := authRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auth/register.html", size: 662, mode: os.FileMode(420), modTime: time.Unix(1438068642, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseDocsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x51\x0e\xc2\x20\x10\x44\xff\x39\x05\xe1\xbf\x70\x01\xed\x5d\x56\x76\x4d\x89\xd0\x6d\x60\xa3\x31\xa4\x77\x97\x1a\x34\x98\x38\x3f\xfb\x31\xb3\xf3\xa6\x56\xa1\xb4\x45\x10\xd2\x66\x83\x2c\x01\x62\x71\x0b\x01\x52\xb6\x8b\xa4\x68\xb4\xdd\x77\x75\xc2\x70\xd7\x3e\x42\x29\x67\x53\xc8\x4b\xe0\xd5\xcc\x4a\x37\x8d\x0e\xb2\x9f\x7e\xdd\x77\xe2\x68\xf5\x91\x3e\xa9\x04\xf9\x86\xfc\x58\xa7\x0b\xe3\x73\xc8\x1d\xaa\x35\xa1\xb6\xad\xa7\x31\xbf\xff\xae\x17\x74\xa0\x6b\xc4\x59\xa9\x7e\xff\xee\xbf\x32\xcb\xb8\xff\x15\x00\x00\xff\xff\x05\xc5\x15\xb5\xe5\x00\x00\x00")

func baseDocsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseDocsHtml,
		"base/docs.html",
	)
}

func baseDocsHtml() (*asset, error) {
	bytes, err := baseDocsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/docs.html", size: 229, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseDocs_indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\x51\x0e\xc2\x20\x10\x44\xff\x39\x05\xe1\xbf\x70\x01\xed\x5d\x56\x76\x4d\x89\xd0\x6d\x60\xa3\x31\xa4\x77\x97\x1a\x34\x98\x38\x3f\xfb\x31\xb3\xf3\xa6\x56\xa1\xb4\x45\x10\xd2\x66\x83\x2c\x01\x62\x71\x0b\x01\x52\xb6\x8b\xa4\x68\xb4\xdd\x77\x75\xc2\x70\xd7\x3e\x42\x29\x67\x53\xc8\x4b\xe0\xd5\xcc\x4a\x37\x8d\x0e\xb2\x9f\x7e\xdd\x77\xe2\x68\xf5\x91\x3e\xa9\x04\xf9\x86\xfc\x58\xa7\x0b\xe3\x73\xc8\x1d\xaa\x35\xa1\xb6\xad\xa7\x31\xbf\xff\xae\x17\x74\xa0\x6b\xc4\x59\xf5\xf3\x77\xfe\x95\x59\xc6\xf9\xaf\x00\x00\x00\xff\xff\xf5\x34\xfe\xae\xe4\x00\x00\x00")

func baseDocs_indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseDocs_indexHtml,
		"base/docs_index.html",
	)
}

func baseDocs_indexHtml() (*asset, error) {
	bytes, err := baseDocs_indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/docs_index.html", size: 228, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xc2\xaa\x2a\x2d\x3f\xbf\x04\x59\x15\x20\x00\x00\xff\xff\xd2\x09\xbd\xf7\x4b\x00\x00\x00")

func baseHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseHomeHtml,
		"base/home.html",
	)
}

func baseHomeHtml() (*asset, error) {
	bytes, err := baseHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/home.html", size: 75, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseJobsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\xca\xca\x4f\x2a\xd6\xcd\xc8\xcf\x4d\x55\xb2\xe3\x52\x00\x02\xac\x26\x00\x15\xc5\xe7\x64\x16\x97\x20\x9b\xa1\x0f\x34\xc4\x8e\x0b\xab\xf2\xb4\xfc\xfc\x12\x64\x0b\x01\x01\x00\x00\xff\xff\x63\xff\xac\x43\x96\x00\x00\x00")

func baseJobsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseJobsHtml,
		"base/jobs.html",
	)
}

func baseJobsHtml() (*asset, error) {
	bytes, err := baseJobsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/jobs.html", size: 150, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseRegionsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\x4a\x4d\xcf\xcc\xcf\x2b\xd6\xcd\xc8\xcf\x4d\x55\xb2\xe3\x52\x00\x02\xac\x86\x40\xd5\xc5\xe7\x64\x16\x97\x20\x1b\xa5\x0f\x34\xcb\x8e\x0b\xab\x96\xb4\xfc\xfc\x12\x64\x7b\x01\x01\x00\x00\xff\xff\x3c\x24\xdf\x64\x9d\x00\x00\x00")

func baseRegionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegionsHtml,
		"base/regions.html",
	)
}

func baseRegionsHtml() (*asset, error) {
	bytes, err := baseRegionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions.html", size: 157, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseRegions_jobHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x2a\x4a\x4d\xcf\xcc\xcf\x2b\xd6\xcd\xca\x4f\x2a\x56\xb2\xe3\x52\x00\x02\xac\x86\x00\xe5\xe3\x73\x32\x8b\x4b\x90\x8d\xd1\x07\x9a\x63\xc7\x85\x55\x79\x5a\x7e\x7e\x09\xb2\x9d\x80\x00\x00\x00\xff\xff\x59\x63\xa1\x65\x99\x00\x00\x00")

func baseRegions_jobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegions_jobHtml,
		"base/regions_job.html",
	)
}

func baseRegions_jobHtml() (*asset, error) {
	bytes, err := baseRegions_jobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions_job.html", size: 153, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _baseRegions_paginateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xb0\xbc\xd3\x5e\x00\x7a\x15\x64\xa8\x69\x8d\xdc\x3a\x8a\x2d\x96\x2a\x77\x27\x63\x86\xfc\xf9\xff\xf7\xaf\x2b\xf8\xc8\x4a\xc1\x80\x99\x4a\x08\xa9\xcf\x3b\xd3\xca\x65\xda\xe3\x50\x84\xa9\xd6\x74\x5f\xe5\x07\x6f\x25\xf7\x07\x16\xde\xc4\x4e\xbf\x65\xda\xe4\x6c\x3b\x5c\x12\xb4\x0c\xa1\xaf\xbd\x9e\x2a\x1e\x3d\x35\x37\x6b\x49\xc3\xfa\xc7\x2c\xfa\xdf\x7f\x00\x00\x00\xff\xff\xa2\xfc\x6f\x1c\x9d\x00\x00\x00")

func baseRegions_paginateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseRegions_paginateHtml,
		"base/regions_paginate.html",
	)
}

func baseRegions_paginateHtml() (*asset, error) {
	bytes, err := baseRegions_paginateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/regions_paginate.html", size: 157, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dashHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x4a\x49\x2c\xce\xd0\xcd\xc8\xcf\x4d\x55\xb2\xe3\x52\x00\x02\x90\x1c\x84\x05\x02\xc8\xe6\x81\x54\xea\xe7\xa5\x96\xc7\x67\xe5\x27\x21\x19\x06\xd6\xa4\x0f\xd7\x45\x48\x7f\x62\x6e\x6a\x7c\x5a\x7e\x51\x2e\x76\x13\xa0\x14\x56\x6f\xa4\xe5\xe7\x97\x20\x7b\x03\x10\x00\x00\xff\xff\x0b\x21\x2d\xf3\xec\x00\x00\x00")

func dashHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashHomeHtml,
		"dash/home.html",
	)
}

func dashHomeHtml() (*asset, error) {
	bytes, err := dashHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/home.html", size: 236, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dashJobs_newHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xb2\x49\xc9\x2c\x53\x48\xce\x49\x2c\x2e\xb6\x55\x4a\x49\x2c\xce\xd0\xcd\xca\x4f\x2a\xd6\xcd\x4b\x2d\x57\xb2\xe3\x52\x00\x02\x64\x53\x40\xf2\xfa\x40\xa9\x78\xa0\x1a\x64\x23\xf4\x81\x66\xd8\x71\x61\xb5\x2f\x2d\x3f\xbf\x04\xd9\x3e\x40\x00\x00\x00\xff\xff\x66\x4c\xa1\x89\x95\x00\x00\x00")

func dashJobs_newHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashJobs_newHtml,
		"dash/jobs_new.html",
	)
}

func dashJobs_newHtml() (*asset, error) {
	bytes, err := dashJobs_newHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/jobs_new.html", size: 149, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dashName_formHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xcb\x6a\xc3\x30\x10\xbc\xe7\x2b\x84\xe8\xb5\xd6\xbd\xd8\x3e\xb6\x14\xda\x12\x28\x3d\x17\xb9\x5a\x27\x02\x3d\x8c\x24\x87\x06\x93\x7f\xef\xea\x51\xe2\x24\x50\x53\x92\x1c\x82\x66\xb4\x9e\xd9\x59\x21\x4d\x93\xec\x49\xf5\xec\x5f\xec\x06\xc4\xe1\xb0\x9a\xa6\x3b\xc3\x35\x3c\x34\xd5\x87\x07\x57\xad\xc1\x79\x6b\xde\x90\xc1\xbd\xba\xb7\x4e\x13\x0d\x61\x6b\x45\x43\x07\xeb\x03\x25\xfc\x2b\x48\x6b\x1a\xca\x04\xf7\x5b\x36\x38\xdb\x4b\x05\x2c\x4a\xd0\x76\x45\xf0\x57\x07\xde\x29\xc8\xeb\x8c\xb7\xc0\xc5\x1c\xbb\x23\x28\x05\xed\x3a\xeb\x90\x68\xec\x6b\x86\xcc\xb1\x9e\xcd\x3f\x88\x7b\x67\x72\x9d\x15\xfb\x3f\xe5\x45\x5b\x2b\xde\x81\x22\x18\xa7\xa1\xbd\x74\x3e\xdc\xe7\x86\x1f\xe3\x3a\x99\xd6\x2c\x95\xb4\xd1\x40\x5c\x0a\x9c\x10\x89\x94\x66\x18\x03\x91\xe2\x44\x90\xc4\xff\x86\x6e\xe4\x0e\xcc\x67\x66\xc2\x7e\x40\x26\xc0\x37\xce\x6e\xc7\xd5\x88\xa0\x8c\xbc\x7a\x8a\x65\x79\xd4\xf4\xcc\xf2\xa4\x89\xb3\x09\x2c\x05\x4c\xee\x25\xe0\xab\x14\xa2\x8c\xf5\x8a\x84\x33\xc5\x92\x50\x27\xdd\xe5\x88\xd9\xff\xf6\x19\x7b\xae\xa5\xda\xff\x9e\x62\x02\x57\x1f\xe3\x4c\xb2\xa4\xcc\xd4\x72\xca\xdc\xc0\x6d\x52\x5e\xb6\xd8\x8d\x21\x58\x53\xfc\xfd\xd8\x69\x19\x68\xfb\xce\x77\x18\x36\x6f\xfd\xc3\x91\xcd\x6e\x0b\x82\x7c\x53\x6b\x16\xef\x79\xbb\xc2\xb7\x00\x0c\xbe\x09\x3f\x01\x00\x00\xff\xff\x60\x51\x4d\x21\x23\x04\x00\x00")

func dashName_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashName_formHtml,
		"dash/name_form.html",
	)
}

func dashName_formHtml() (*asset, error) {
	bytes, err := dashName_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/name_form.html", size: 1059, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dashNew_jobHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xc1\x6e\xdc\x20\x10\x86\xef\x7d\x8a\x11\xca\xb1\x31\xf7\xca\xf6\x25\x6a\x5a\xf5\xd0\x53\xef\x15\x98\x71\x4d\x8b\xc1\x82\x71\xa2\x15\xf2\xbb\x77\x88\xdd\xda\xde\x6c\xa4\x58\x5a\xc1\x3f\x30\xdf\xce\x0f\x43\xdd\x87\x38\xc2\x88\x34\x04\xd3\x88\x29\x24\x12\xa0\x3a\xb2\xc1\x37\x42\x1a\x95\x06\xf9\x3b\xe8\x24\x3d\x3e\x8b\xf6\x03\xf0\x57\x93\xd2\x0e\xd7\xf9\xaa\x07\x54\xe6\xa4\x77\x51\xbe\x87\x88\x8a\x10\x14\x30\x03\x18\xb6\xef\x94\xc7\xad\x45\x5d\x81\x74\x30\x97\x83\xb6\x7e\x9a\x09\x2c\x97\x49\xe1\x0f\x7a\x01\x74\x99\xb0\x11\x83\x35\xa6\x28\xaf\x46\x56\x5d\x8a\xfd\xcf\x6d\xfd\x49\xb9\x99\x43\x39\x43\xf5\xc0\xe1\x1f\x25\x0a\xcb\x22\x76\x66\xce\xcf\x96\x06\xa8\xbe\x05\xfd\xc8\xe7\xb0\x2c\x87\x95\xa8\xfc\x2f\x84\x3b\xfb\x11\xee\x7a\x8b\xce\xc0\xa7\x06\xaa\xc7\x32\x4b\x87\x7d\x35\xc5\xb3\xdd\x9a\xcc\x39\xf0\x12\x74\x4a\xa3\x6b\x73\x7e\x19\x37\x60\xf5\x05\xe9\x3b\x17\xbd\x2c\xb5\x5c\xd7\xcf\x20\x79\x4d\xba\x89\xce\x79\x72\xca\xfa\x7f\xcc\xaf\x34\xba\x43\x79\xff\x53\x8d\x7d\x7a\x9d\x7b\x32\x8a\xc5\x29\xc6\x58\x7c\x6e\xb0\xcf\x31\x86\x98\x6e\xe0\x76\x4f\xd0\x39\x95\x52\x23\x7a\x1e\x86\x7b\x2c\x09\x82\x7d\x16\xd0\x1b\xbe\xf6\x3f\x46\x6f\x6e\x95\x2a\x5f\xd5\x7a\x3e\x0a\x56\xf1\x78\x85\x67\xcc\xb5\x7e\xe7\x05\xe9\x99\x28\xf8\xad\xa5\xd2\xac\x47\xcb\x0f\x61\xf3\xa6\xc9\x03\xff\xee\xa7\x68\x47\x15\x2f\xa2\xed\xd6\x96\xe6\x66\xae\xe5\x9a\xf8\xfe\x7a\x59\xed\x7d\xcd\x62\x7d\x4d\xb5\x2c\xef\xb0\xfd\x1b\x00\x00\xff\xff\xb8\xde\x5c\x9d\x8e\x03\x00\x00")

func dashNew_jobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashNew_jobHtml,
		"dash/new_job.html",
	)
}

func dashNew_jobHtml() (*asset, error) {
	bytes, err := dashNew_jobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/new_job.html", size: 910, mode: os.FileMode(420), modTime: time.Unix(1438068642, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dashProfileHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\xb0\xbc\xd3\x5c\x00\x7a\x15\x64\x11\x57\xae\x64\xe3\x2a\xb6\x58\xaa\xdc\x1d\xd8\x32\x74\x7e\x7a\xff\x77\x9e\xc9\x76\x28\x25\x03\x1e\xd4\x73\x27\x8d\x2a\x4c\x8d\xfb\x22\x69\x8a\xb0\x8c\x51\xee\x6d\xff\xc0\x4b\x29\xe2\x81\x8d\x42\x6e\xe2\xc6\xb8\x16\x00\x98\x03\xff\xa9\xbe\xc9\xf8\xb9\x79\xb7\xf9\x5f\x7f\x81\xb5\x5c\x62\x9b\x7b\xce\xd8\x37\x00\x00\xff\xff\x5b\x71\x21\x8f\x92\x00\x00\x00")

func dashProfileHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashProfileHtml,
		"dash/profile.html",
	)
}

func dashProfileHtml() (*asset, error) {
	bytes, err := dashProfileHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dash/profile.html", size: 146, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors400Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors400HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors400Html,
		"errors/400.html",
	)
}

func errors400Html() (*asset, error) {
	bytes, err := errors400HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/400.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1438633920, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x48\x2c\x2a\xc9\x4c\xcc\x29\xd6\xcf\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\xf3\x4d\x2d\x2e\x4e\x4c\x4f\x05\x73\xb0\x68\x49\xcb\xcf\x2f\x41\xd6\x02\x08\x00\x00\xff\xff\xcc\x88\x4f\xc3\x58\x00\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 88, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsDocs_indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x8b\xc3\x20\x10\x85\xef\xf9\x15\x83\xe4\xb8\xab\xf7\xc5\x08\x7b\x5c\x08\x7b\x58\xd8\x1f\xe0\xc6\xd9\xc4\x36\x31\xa0\xc6\x16\xc4\xff\xde\x69\x69\x9b\x94\xd6\x93\xfa\xcd\x9b\xf7\x78\xd2\xd8\x04\xdd\xa8\x43\x68\x58\xc0\x2e\xda\xd9\x31\x55\x01\x1d\xe9\xf4\x9d\x4c\xe8\x96\xeb\xf7\x05\xe9\x2d\x78\xb7\x11\x27\x08\x38\x92\x1c\x0d\x83\xc1\xe3\x7f\xc3\xc4\x6e\xfe\x0b\xc2\x63\x4f\x1b\x03\x53\x39\x47\x0f\xfc\x93\x0c\x12\xb6\xda\xf5\xc0\xcc\xdc\x2d\x24\x8f\x81\x95\x22\x85\x5e\xb7\xe7\x7c\xb0\x71\x00\x4e\x03\x5f\xce\xe0\xb1\x94\x0d\xf2\xa4\x45\xa8\xf7\x6f\x75\xfa\x68\xf8\x06\xbd\xc8\x74\x8b\x92\x73\x9d\xf8\xef\x4f\x5b\xca\x39\x07\xdd\xbf\xf5\x84\x4f\xa6\xe8\xcc\x83\xd3\xfa\x96\x82\xaa\x50\x95\x14\xd4\x95\x3a\x05\x00\x00\xff\xff\x09\x35\x92\xa4\x31\x01\x00\x00")

func partialsDocs_indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsDocs_indexHtml,
		"partials/docs_index.html",
	)
}

func partialsDocs_indexHtml() (*asset, error) {
	bytes, err := partialsDocs_indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/docs_index.html", size: 305, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsFlashHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\xc1\x0e\xc2\x20\x10\x44\xef\xfd\x8a\x4d\xd3\xa3\xe2\xbd\xb1\x26\x5e\xbc\xa8\x1f\x81\x65\x6d\x49\x11\x93\x2e\xc1\xc3\xca\xbf\xbb\x04\x7a\x92\xdb\x0c\x33\x6f\x87\xb9\x9b\xdc\xfb\xa1\x5d\x3f\xa8\x94\x1a\xe6\x8f\x0d\x33\xa8\x8b\xd3\x34\x8b\x3e\x1a\x1b\x61\x14\x41\x43\xfb\xcc\xde\xfe\x85\x44\x7a\x42\x6a\x4f\x0d\xc8\x63\x5e\xb5\x9f\x10\xba\x65\xd7\xc5\x7e\x00\x05\xd2\xca\x1f\x7f\x4d\x89\x92\xd7\x8b\x44\xa3\xba\x5a\x6f\xbe\x46\x4c\x34\x29\x55\x52\xa1\x85\x15\xea\x20\x75\x1e\x83\x8d\x78\x13\x7c\xae\xdc\xcb\xdd\x8d\x7e\x10\xfc\xb6\x00\xbd\xc9\x53\x8b\x55\xe5\x2f\x00\x00\xff\xff\x8d\x37\x9c\x87\xd8\x00\x00\x00")

func partialsFlashHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsFlashHtml,
		"partials/flash.html",
	)
}

func partialsFlashHtml() (*asset, error) {
	bytes, err := partialsFlashHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/flash.html", size: 216, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func partialsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsFooterHtml,
		"partials/footer.html",
	)
}

func partialsFooterHtml() (*asset, error) {
	bytes, err := partialsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/footer.html", size: 22, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xf3\x36\x0c\x3e\x2f\xbf\x42\xd3\xdd\xd1\x75\x07\xc7\xc0\x8b\x7e\x0c\x03\xba\xae\x40\xd3\xc3\x76\x19\x64\x9b\x89\xd5\xca\x92\x21\xd1\xed\x5a\x23\xff\x7d\x92\x1d\xe5\x75\x1c\xc5\xfd\x40\x7d\x31\x2c\x3e\x7c\x48\x91\x8f\x29\xa5\xbf\x5e\xfe\x75\xb1\xfe\xfb\xee\x8a\x54\x58\xcb\x6c\x91\x86\x17\xf0\x92\x48\xae\xb6\x2b\x0a\x8a\x66\x0b\xe2\x9e\xb4\x06\xe4\xa4\xa8\xb8\xb1\x80\x2b\xfa\xb0\xbe\x4e\x7e\x73\xa6\x5f\x86\x75\xc5\x6b\x58\xd1\xc2\x9a\xcd\xbf\xa8\x9f\x9c\x13\x29\xb4\x42\x50\x0e\xd9\x75\xcb\x0b\xb7\xbe\xf6\xcb\xbb\x1d\x25\x6c\xe0\xeb\xba\x17\x81\x15\x59\xde\xf1\x2d\xac\x05\x4a\xd8\xed\x86\x38\xe8\x3f\x32\xe7\xb5\xdb\xa5\x6c\xf8\xd8\x3b\x80\xb4\xa7\xa8\x1f\x4d\x73\xeb\x82\x9f\x82\x55\x19\xb0\x52\xa8\x27\x62\x40\xae\xa8\xc5\x57\x09\xb6\x02\x40\x4a\x2a\x03\x9b\x15\x65\x16\x39\x8a\x82\x15\xd6\xb2\x56\x2c\xdd\x8b\x1e\xe7\x77\x5f\x18\xd1\xa0\xdd\x73\x75\x9d\xed\xbf\xc9\xf2\xb0\x30\x04\x4a\x99\x2f\x9a\xab\x5d\xae\xcb\x57\xf7\x2a\xc5\x33\x29\x24\xb7\xd6\x05\x15\x08\xa1\x88\x1e\x04\x26\x58\x14\x7f\x16\x5b\x17\x5e\x87\x22\xf7\x98\x91\x6b\x0d\xaa\x4d\x5e\x0c\x6f\x1a\x30\x23\x48\x0f\xe3\x61\x07\x34\xa0\xa5\xde\xea\x29\xca\x36\x5c\x8d\xed\x09\xc2\x7f\x38\x01\xf9\xe7\x1f\x28\xa5\xb0\x78\xec\xcc\xbc\xf7\x84\x90\xf1\x6c\x71\xbc\xd2\x9c\x6e\x27\xe9\x13\xcf\x5b\x44\xb7\x35\x22\xca\x15\x7d\xb4\x49\xad\x73\x21\xa1\x37\xd1\xec\xcf\xab\xdb\x87\x94\x35\x53\xae\xd1\xde\x1d\x5b\x24\xcf\xb4\x95\x3d\xdf\x24\x56\x04\xb9\x6f\xfd\x88\x2e\xf1\x42\xa0\xd9\xb8\x74\x4e\x41\x68\xc8\xf2\x47\x81\xe2\x19\x6e\x9c\xe2\x09\xad\x74\x0d\x49\x8e\x8a\x7a\x49\xf1\x2c\x65\x52\x7c\x82\x3c\x8a\xec\xd1\x87\xa0\x8f\x3a\xb7\xd1\xc8\xde\x30\x8a\x1c\x0f\xfa\x99\x74\x48\xad\x8d\x93\x9e\x0b\x3d\xd6\x93\x93\x63\x4d\x2c\x48\x28\x10\x4a\x7a\x94\x95\x81\xad\xab\xa8\x8d\x25\x17\x4c\x33\xb9\x85\xfe\x04\xdd\xb7\xf9\x4c\x6b\x46\x69\xc7\x12\x8c\xe6\xc5\xea\x37\xee\xa4\xf3\xc2\xd5\x1b\x9f\xef\xcd\x97\xd8\x4b\xee\x7e\xb2\x4b\x37\xe0\xde\xe7\x4e\x59\x2b\xbf\xa1\x41\x1f\xd2\x4b\xa9\x8b\x68\x47\x2a\x90\xcd\xb7\xca\xe5\x43\xd9\xf8\xb9\xce\x0b\x8c\x25\xb4\x37\x7d\x2d\xa7\xd3\x8a\xa6\xcc\x4d\x83\x6c\x6e\x3e\x84\x09\x80\x5a\x4b\x1b\x1b\x16\xe3\x29\x0c\xdc\x14\x55\x92\xf3\xe9\x20\x9d\x01\x73\x55\x26\x5e\xc5\x22\x36\x31\x0f\x7e\x42\x35\x2d\x12\x7c\x6d\x20\x38\x52\xd2\x48\x5e\x40\xa5\xa5\x1b\xf6\x2b\x7a\xe5\x4e\x42\x43\xee\x07\x13\x9b\x61\x1a\x06\x66\xa0\x7a\x2f\xb0\x7f\x7e\xd7\x33\x12\x1d\xe8\xce\x35\xe1\xa4\xb8\x33\xcb\x5d\x27\x36\x64\xf9\x87\xbd\xd1\x5b\x08\xc7\xea\x91\x1b\xff\x79\xd8\x6d\x55\xd2\x36\x87\x1f\xac\xe4\xb6\x8a\x0e\x3b\x6f\xc8\x35\x37\xe5\x39\xa9\x9c\xe7\xe4\x2d\x56\xcc\x1f\x66\x6d\x54\x86\x7b\xcb\x19\xda\xa3\x6b\xc4\xe7\xe2\x09\x75\x26\x9c\x38\xab\xf7\x77\x48\xfd\xe4\xb1\xe8\xcf\xf6\xf8\xc0\xed\x6d\xe7\x37\xa2\xa6\xbd\x98\xb4\x6f\xf4\x39\xdc\x4f\xc0\x84\xcb\x8d\xef\xe7\xb5\xcb\xac\x3a\xdc\x63\xdc\x58\x74\xaa\x45\x20\xb4\xe1\x06\x05\x97\x96\x6d\x3c\x60\xe9\x2f\x85\xf4\xe4\xc2\xb3\x58\xfc\x1f\x00\x00\xff\xff\x61\x65\xba\xee\x3e\x0a\x00\x00")

func partialsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsHeaderHtml,
		"partials/header.html",
	)
}

func partialsHeaderHtml() (*asset, error) {
	bytes, err := partialsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/header.html", size: 2622, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsJob_listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x8f\x9b\x30\x10\xbd\xe7\x57\x4c\x5d\x8e\x0d\x48\xcd\xad\x02\xa4\x4a\xbd\x54\xaa\xd4\x4b\xef\x95\xc1\x93\xe0\xd6\xb1\x11\x9e\x90\x22\xca\x7f\x5f\xf3\xb1\x09\x08\xc8\xc7\x6a\x91\xa2\xd8\x7e\x33\x7e\xef\x8d\xed\xa9\x6b\x4f\x71\x7d\xf8\x12\xf9\x5f\x53\x92\x25\xfe\x70\x93\xa6\xd9\x84\x42\x96\x90\x2a\x6e\x6d\xc4\x2c\x3a\xc4\x68\x16\x6f\xc0\x7d\x63\xe4\x8f\x49\xb6\x4a\x5a\x1a\xa0\xf6\xab\xeb\xb3\xa4\x0c\x7c\x07\x59\xb7\xcf\x75\xb9\x70\x1b\x23\x78\x7f\x3f\x79\xa5\x23\x9b\x40\x5d\x86\x57\x8e\xd6\x96\x88\x24\xe1\x71\x44\x74\x09\x23\x9e\x28\x9c\xaf\xf7\x58\x86\x5c\xac\x61\xc5\x32\x30\x24\x42\x6a\x94\xcd\xb9\x8e\xd8\x6e\x81\x75\x12\xcc\x21\x2b\x70\x1f\xb1\x8f\xec\x55\xef\x5e\xe1\xbf\x2d\x49\x52\xc8\xe2\xba\xf6\x7f\xb5\xa3\xa6\x09\x03\x7e\x83\x32\xa0\x6c\x45\x69\xb0\x26\xb5\xcd\xb9\x61\x30\x31\xa2\x7a\x9b\x79\x27\x9a\x0a\xe8\x6e\x06\x30\xe1\x28\x94\xd4\xc8\x9a\xe6\x86\xca\x3e\x53\x5c\xcb\xf6\xb9\xb3\xfe\x6d\x48\xfe\x2f\x38\x75\x25\xa0\x35\xb9\xeb\x2e\x9f\x11\x2b\xad\x3d\xa1\xf8\x9d\x54\xcf\xab\x7d\xf8\x90\x63\x38\xf2\x03\x6a\x32\x20\x75\x7a\xef\x50\x9d\xdd\xf7\xf5\xbb\x52\xbf\x4b\x40\x72\x22\x32\x1a\x80\xaa\x1c\x23\xd6\xcf\xd8\xa4\x46\x3c\xcf\x55\xb5\x4d\x48\xb3\xf6\x40\xfa\x88\x7b\x1e\x9e\xb4\x10\xac\x5c\x3e\x07\xcc\x9f\x6b\x18\xb8\xa7\x3e\x6e\x21\xa8\xc5\xa4\x41\xcc\xe6\xca\xe2\x42\xb7\x58\xa0\xcb\x76\xf1\x4f\x93\xdb\x0f\x61\xe0\x46\x73\x38\x8f\xbf\x13\x58\xc4\xa3\x05\xf7\x92\x0a\x04\xee\x7e\xda\x40\xdb\xbd\x60\x6f\x0a\xb0\x99\x39\x43\x85\xe4\x87\x41\xfe\xb0\xe8\x01\xea\xff\x5e\x02\x00\x00\xff\xff\x1b\x06\xc5\x43\x61\x05\x00\x00")

func partialsJob_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsJob_listHtml,
		"partials/job_list.html",
	)
}

func partialsJob_listHtml() (*asset, error) {
	bytes, err := partialsJob_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/job_list.html", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1437901535, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsRegions_listHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xc1\x4e\x83\x40\x10\x86\xef\x7d\x8a\x91\xf4\x28\xec\xc1\x9b\x01\x12\x8f\x26\x46\x0f\x3e\xc1\xb6\x0c\xdd\xb5\x0b\x4b\x76\xa6\xa0\x21\xbc\xbb\x13\xa0\xb6\x45\x6b\x3c\x48\x42\x02\xff\xcc\xfc\x7c\x3b\x3f\x7d\xbf\x76\xba\xde\xdd\x67\xc9\xc3\x96\x6d\x8b\x4f\xf2\x32\x0c\xab\xb4\xb0\x2d\x6c\x9d\x26\xca\x22\x42\xa9\xf8\x3a\xca\x57\x20\x57\xdf\x77\x96\x0d\x24\x01\x77\x22\x92\xf4\x4e\x6a\x90\x41\x84\xf5\xfe\x76\xdd\x8a\xd9\x2c\x5f\xb7\x19\xab\x07\x77\x2c\x96\xd6\x31\x86\xd8\x59\xe2\xb3\x86\xb1\xc9\xd9\x4b\x61\x14\x35\x98\x80\x65\x16\xa9\x37\xbf\x21\x35\xb3\x28\x39\x4c\x9b\xbc\x1a\x1f\x78\x18\xa2\x85\xb5\x65\xac\x80\xd0\x09\x05\x16\xd1\x77\xcb\xe9\x14\x32\xff\xac\x2b\x9c\xf1\x2f\x3e\xa9\xf4\x02\x4c\x2d\xc9\xfe\x13\xf5\x37\xc2\x79\xec\xaf\x88\xa7\x7d\xab\x83\x9b\x1a\x52\x25\xc1\x1c\xf3\xc4\xba\xf8\x4a\x11\x1d\xe1\x0f\xd9\x6d\xe4\x1f\xd9\x93\xd3\x8c\x60\x34\xc5\xa5\x7d\xc7\x22\xee\x6c\xc1\xe6\x3c\x4e\x73\x97\xbf\xf8\x86\x6e\x52\x25\x4f\x27\xb9\xc9\x1f\x59\x36\x8f\x15\x01\x1b\x0c\x08\x5a\xee\xda\xc3\xbc\x0a\x28\x7d\x00\x32\xbe\x83\x0f\xe4\x24\x55\xcd\x55\xc4\x49\xfa\x0c\x00\x00\xff\xff\x02\xeb\x08\xb3\xb2\x02\x00\x00")

func partialsRegions_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsRegions_listHtml,
		"partials/regions_list.html",
	)
}

func partialsRegions_listHtml() (*asset, error) {
	bytes, err := partialsRegions_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/regions_list.html", size: 690, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _partialsSidenavHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\x41\x0a\xc2\x40\x0c\x45\xf7\x3d\x45\xc8\x5e\x73\x81\x69\x40\x70\xa9\x87\x88\x6d\xac\x95\x76\x0a\x93\xb1\x42\x4b\xef\x6e\x10\x2d\x2e\xc4\x85\x59\xe6\xf1\x5f\xc8\x0f\x75\x3b\x42\xd5\x89\x59\x89\xa6\x55\x6e\x87\x88\x5c\x80\x4f\x88\xb2\x92\x5e\xe3\xed\xb5\x7e\x22\xf9\x04\x9b\x36\x6b\x0f\xa6\x9d\xc7\xb5\x46\xb8\x24\x3d\x97\x48\xd7\xe1\x64\x94\xb4\x71\xa3\x21\xcf\x73\x4e\xb0\xdd\xf9\x81\x51\x0f\x12\x1b\xc0\x37\x5a\x96\x40\xf2\xd3\xfd\x55\x49\xfd\x24\xc8\xc7\xbb\xc4\x49\xfe\x13\xd4\x92\x90\xf7\x92\x6c\x8d\x07\xf2\x9f\xb9\x08\xe4\xa5\xf0\x23\x00\x00\xff\xff\x0a\x14\xb5\x42\x1a\x01\x00\x00")

func partialsSidenavHtmlBytes() ([]byte, error) {
	return bindataRead(
		_partialsSidenavHtml,
		"partials/sidenav.html",
	)
}

func partialsSidenavHtml() (*asset, error) {
	bytes, err := partialsSidenavHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "partials/sidenav.html", size: 282, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resumeHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x40\x60\x93\x9b\x5a\x92\xa8\x90\x9c\x91\x58\x54\x9c\x5a\x62\xab\x14\x1a\xe2\xa6\x6b\x01\x93\x2a\xc9\x2c\xc9\x49\xb5\xb3\xd1\x87\xd0\x5c\x36\xfa\x20\x03\x80\x74\x52\x7e\x4a\xa5\x1d\x17\x90\x0f\x61\x00\xc5\x41\xe6\x03\x02\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeHomeHtml,
		"resume/home.html",
	)
}

func resumeHomeHtml() (*asset, error) {
	bytes, err := resumeHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/home.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1438516337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resumeUpdateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x40\x60\x93\x9b\x5a\x92\xa8\x90\x9c\x91\x58\x54\x9c\x5a\x62\xab\x14\x1a\xe2\xa6\x6b\x01\x93\x2a\xc9\x2c\xc9\x49\xb5\xb3\xd1\x87\xd0\x5c\x36\xfa\x20\x03\x80\x74\x52\x7e\x4a\xa5\x1d\x17\x90\x0f\x61\x00\xc5\x41\xe6\x03\x02\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeUpdateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeUpdateHtml,
		"resume/update.html",
	)
}

func resumeUpdateHtml() (*asset, error) {
	bytes, err := resumeUpdateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/update.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1438516337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resumeViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x40\x60\x93\x9b\x5a\x92\xa8\x90\x9c\x91\x58\x54\x9c\x5a\x62\xab\x14\x1a\xe2\xa6\x6b\x01\x93\x2a\xc9\x2c\xc9\x49\xb5\xb3\xd1\x87\xd0\x5c\x36\xfa\x20\x03\x80\x74\x52\x7e\x4a\xa5\x1d\x17\x90\x0f\x61\x00\xc5\x41\xe6\x03\x02\x00\x00\xff\xff\x27\xec\xda\x28\x76\x00\x00\x00")

func resumeViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resumeViewHtml,
		"resume/view.html",
	)
}

func resumeViewHtml() (*asset, error) {
	bytes, err := resumeViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resume/view.html", size: 118, mode: os.FileMode(420), modTime: time.Unix(1438516337, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _testBaseFooterTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xcb\xcf\x2f\x49\x2d\xb2\xe3\xe2\xcc\xad\x54\x80\xb0\xb9\x6c\xf4\x61\x82\x36\xfa\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x4d\x7a\xea\x59\x25\x00\x00\x00")

func testBaseFooterTplBytes() ([]byte, error) {
	return bindataRead(
		_testBaseFooterTpl,
		"test/base/footer.tpl",
	)
}

func testBaseFooterTpl() (*asset, error) {
	bytes, err := testBaseFooterTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/base/footer.tpl", size: 37, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _testBaseHeaderTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xe3\xe2\xac\xae\xce\x4c\x53\xd0\x0b\xc9\x2c\xc9\x49\xad\xad\xb5\x29\x01\xd1\x76\xd5\xd5\x70\x01\x7d\x98\x48\x6a\x4e\x31\x42\x41\x55\x6a\x4a\x4e\x66\x71\x09\x92\x6c\x5e\x4a\x6d\x2d\x97\x8d\x3e\xd8\x50\x40\x00\x00\x00\xff\xff\x4b\x87\xdd\x59\x62\x00\x00\x00")

func testBaseHeaderTplBytes() ([]byte, error) {
	return bindataRead(
		_testBaseHeaderTpl,
		"test/base/header.tpl",
	)
}

func testBaseHeaderTpl() (*asset, error) {
	bytes, err := testBaseHeaderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/base/header.tpl", size: 98, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _testTmplHelloTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x2a\x49\x2d\x2e\xd1\x4f\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\xd2\x2b\x29\xc8\x51\xaa\xad\xe5\xb2\xc9\x30\xb4\x03\xaa\x2b\x52\x50\x2a\x2e\x57\x52\x50\xca\xc8\xcf\x4d\xd5\x4d\x2a\xc9\x03\x4a\xd9\xe8\x03\xa5\xb8\xb0\x9b\x91\x96\x9f\x5f\x02\x35\x43\xa1\xb6\x16\x10\x00\x00\xff\xff\xb9\x00\x9d\x33\x68\x00\x00\x00")

func testTmplHelloTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmplHelloTmpl,
		"test/tmpl/hello.tmpl",
	)
}

func testTmplHelloTmpl() (*asset, error) {
	bytes, err := testTmplHelloTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/tmpl/hello.tmpl", size: 104, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _testTmplScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x4e\x2e\xca\x2c\x28\xb1\xb3\xd1\x87\x32\x00\x01\x00\x00\xff\xff\x1b\x99\x48\xfe\x11\x00\x00\x00")

func testTmplScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_testTmplScriptHtml,
		"test/tmpl/script.html",
	)
}

func testTmplScriptHtml() (*asset, error) {
	bytes, err := testTmplScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/tmpl/script.html", size: 17, mode: os.FileMode(420), modTime: time.Unix(1437798150, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auth/date_picker.html": authDate_pickerHtml,
	"auth/login.html": authLoginHtml,
	"auth/register.html": authRegisterHtml,
	"base/docs.html": baseDocsHtml,
	"base/docs_index.html": baseDocs_indexHtml,
	"base/home.html": baseHomeHtml,
	"base/jobs.html": baseJobsHtml,
	"base/regions.html": baseRegionsHtml,
	"base/regions_job.html": baseRegions_jobHtml,
	"base/regions_paginate.html": baseRegions_paginateHtml,
	"dash/home.html": dashHomeHtml,
	"dash/jobs_new.html": dashJobs_newHtml,
	"dash/name_form.html": dashName_formHtml,
	"dash/new_job.html": dashNew_jobHtml,
	"dash/profile.html": dashProfileHtml,
	"errors/400.html": errors400Html,
	"errors/404.html": errors404Html,
	"errors/500.html": errors500Html,
	"partials/docs_index.html": partialsDocs_indexHtml,
	"partials/flash.html": partialsFlashHtml,
	"partials/footer.html": partialsFooterHtml,
	"partials/header.html": partialsHeaderHtml,
	"partials/job_list.html": partialsJob_listHtml,
	"partials/regions_list.html": partialsRegions_listHtml,
	"partials/sidenav.html": partialsSidenavHtml,
	"resume/home.html": resumeHomeHtml,
	"resume/update.html": resumeUpdateHtml,
	"resume/view.html": resumeViewHtml,
	"test/base/footer.tpl": testBaseFooterTpl,
	"test/base/header.tpl": testBaseHeaderTpl,
	"test/tmpl/hello.tmpl": testTmplHelloTmpl,
	"test/tmpl/script.html": testTmplScriptHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"auth": &bintree{nil, map[string]*bintree{
		"date_picker.html": &bintree{authDate_pickerHtml, map[string]*bintree{
		}},
		"login.html": &bintree{authLoginHtml, map[string]*bintree{
		}},
		"register.html": &bintree{authRegisterHtml, map[string]*bintree{
		}},
	}},
	"base": &bintree{nil, map[string]*bintree{
		"docs.html": &bintree{baseDocsHtml, map[string]*bintree{
		}},
		"docs_index.html": &bintree{baseDocs_indexHtml, map[string]*bintree{
		}},
		"home.html": &bintree{baseHomeHtml, map[string]*bintree{
		}},
		"jobs.html": &bintree{baseJobsHtml, map[string]*bintree{
		}},
		"regions.html": &bintree{baseRegionsHtml, map[string]*bintree{
		}},
		"regions_job.html": &bintree{baseRegions_jobHtml, map[string]*bintree{
		}},
		"regions_paginate.html": &bintree{baseRegions_paginateHtml, map[string]*bintree{
		}},
	}},
	"dash": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{dashHomeHtml, map[string]*bintree{
		}},
		"jobs_new.html": &bintree{dashJobs_newHtml, map[string]*bintree{
		}},
		"name_form.html": &bintree{dashName_formHtml, map[string]*bintree{
		}},
		"new_job.html": &bintree{dashNew_jobHtml, map[string]*bintree{
		}},
		"profile.html": &bintree{dashProfileHtml, map[string]*bintree{
		}},
	}},
	"errors": &bintree{nil, map[string]*bintree{
		"400.html": &bintree{errors400Html, map[string]*bintree{
		}},
		"404.html": &bintree{errors404Html, map[string]*bintree{
		}},
		"500.html": &bintree{errors500Html, map[string]*bintree{
		}},
	}},
	"partials": &bintree{nil, map[string]*bintree{
		"docs_index.html": &bintree{partialsDocs_indexHtml, map[string]*bintree{
		}},
		"flash.html": &bintree{partialsFlashHtml, map[string]*bintree{
		}},
		"footer.html": &bintree{partialsFooterHtml, map[string]*bintree{
		}},
		"header.html": &bintree{partialsHeaderHtml, map[string]*bintree{
		}},
		"job_list.html": &bintree{partialsJob_listHtml, map[string]*bintree{
		}},
		"regions_list.html": &bintree{partialsRegions_listHtml, map[string]*bintree{
		}},
		"sidenav.html": &bintree{partialsSidenavHtml, map[string]*bintree{
		}},
	}},
	"resume": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{resumeHomeHtml, map[string]*bintree{
		}},
		"update.html": &bintree{resumeUpdateHtml, map[string]*bintree{
		}},
		"view.html": &bintree{resumeViewHtml, map[string]*bintree{
		}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.tpl": &bintree{testBaseFooterTpl, map[string]*bintree{
			}},
			"header.tpl": &bintree{testBaseHeaderTpl, map[string]*bintree{
			}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"hello.tmpl": &bintree{testTmplHelloTmpl, map[string]*bintree{
			}},
			"script.html": &bintree{testTmplScriptHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

