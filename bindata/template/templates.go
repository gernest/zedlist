// Code generated by go-bindata.
// sources:
// templates/auth/date_picker.html
// templates/auth/login.html
// templates/auth/register.html
// templates/base/docs.html
// templates/base/docs_index.html
// templates/base/home.html
// templates/base/jobs.html
// templates/base/regions.html
// templates/base/regions_job.html
// templates/base/regions_paginate.html
// templates/dash/home.html
// templates/dash/jobs_new.html
// templates/dash/name_form.html
// templates/dash/new_job.html
// templates/dash/profile.html
// templates/errors/400.html
// templates/errors/404.html
// templates/errors/500.html
// templates/partials/docs_index.html
// templates/partials/flash.html
// templates/partials/footer.html
// templates/partials/header.html
// templates/partials/job_list.html
// templates/partials/regions_list.html
// templates/partials/sidenav.html
// templates/resume/home.html
// templates/resume/update.html
// templates/resume/view.html
// templates/test/base/footer.tpl
// templates/test/base/header.tpl
// templates/test/tmpl/hello.tmpl
// templates/test/tmpl/script.html
// DO NOT EDIT!

package template

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// authDate_pickerHtml reads file data from disk. It returns an error on failure.
func authDate_pickerHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/auth/date_picker.html"
	name := "auth/date_picker.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// authLoginHtml reads file data from disk. It returns an error on failure.
func authLoginHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/auth/login.html"
	name := "auth/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// authRegisterHtml reads file data from disk. It returns an error on failure.
func authRegisterHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/auth/register.html"
	name := "auth/register.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseDocsHtml reads file data from disk. It returns an error on failure.
func baseDocsHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/docs.html"
	name := "base/docs.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseDocs_indexHtml reads file data from disk. It returns an error on failure.
func baseDocs_indexHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/docs_index.html"
	name := "base/docs_index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseHomeHtml reads file data from disk. It returns an error on failure.
func baseHomeHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/home.html"
	name := "base/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseJobsHtml reads file data from disk. It returns an error on failure.
func baseJobsHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/jobs.html"
	name := "base/jobs.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseRegionsHtml reads file data from disk. It returns an error on failure.
func baseRegionsHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/regions.html"
	name := "base/regions.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseRegions_jobHtml reads file data from disk. It returns an error on failure.
func baseRegions_jobHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/regions_job.html"
	name := "base/regions_job.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// baseRegions_paginateHtml reads file data from disk. It returns an error on failure.
func baseRegions_paginateHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/base/regions_paginate.html"
	name := "base/regions_paginate.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashHomeHtml reads file data from disk. It returns an error on failure.
func dashHomeHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/dash/home.html"
	name := "dash/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashJobs_newHtml reads file data from disk. It returns an error on failure.
func dashJobs_newHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/dash/jobs_new.html"
	name := "dash/jobs_new.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashName_formHtml reads file data from disk. It returns an error on failure.
func dashName_formHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/dash/name_form.html"
	name := "dash/name_form.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashNew_jobHtml reads file data from disk. It returns an error on failure.
func dashNew_jobHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/dash/new_job.html"
	name := "dash/new_job.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashProfileHtml reads file data from disk. It returns an error on failure.
func dashProfileHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/dash/profile.html"
	name := "dash/profile.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// errors400Html reads file data from disk. It returns an error on failure.
func errors400Html() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/errors/400.html"
	name := "errors/400.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// errors404Html reads file data from disk. It returns an error on failure.
func errors404Html() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/errors/404.html"
	name := "errors/404.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// errors500Html reads file data from disk. It returns an error on failure.
func errors500Html() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/errors/500.html"
	name := "errors/500.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsDocs_indexHtml reads file data from disk. It returns an error on failure.
func partialsDocs_indexHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/docs_index.html"
	name := "partials/docs_index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsFlashHtml reads file data from disk. It returns an error on failure.
func partialsFlashHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/flash.html"
	name := "partials/flash.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsFooterHtml reads file data from disk. It returns an error on failure.
func partialsFooterHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/footer.html"
	name := "partials/footer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsHeaderHtml reads file data from disk. It returns an error on failure.
func partialsHeaderHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/header.html"
	name := "partials/header.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsJob_listHtml reads file data from disk. It returns an error on failure.
func partialsJob_listHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/job_list.html"
	name := "partials/job_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsRegions_listHtml reads file data from disk. It returns an error on failure.
func partialsRegions_listHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/regions_list.html"
	name := "partials/regions_list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsSidenavHtml reads file data from disk. It returns an error on failure.
func partialsSidenavHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/partials/sidenav.html"
	name := "partials/sidenav.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resumeHomeHtml reads file data from disk. It returns an error on failure.
func resumeHomeHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/resume/home.html"
	name := "resume/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resumeUpdateHtml reads file data from disk. It returns an error on failure.
func resumeUpdateHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/resume/update.html"
	name := "resume/update.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// resumeViewHtml reads file data from disk. It returns an error on failure.
func resumeViewHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/resume/view.html"
	name := "resume/view.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// testBaseFooterTpl reads file data from disk. It returns an error on failure.
func testBaseFooterTpl() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/test/base/footer.tpl"
	name := "test/base/footer.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// testBaseHeaderTpl reads file data from disk. It returns an error on failure.
func testBaseHeaderTpl() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/test/base/header.tpl"
	name := "test/base/header.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// testTmplHelloTmpl reads file data from disk. It returns an error on failure.
func testTmplHelloTmpl() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/test/tmpl/hello.tmpl"
	name := "test/tmpl/hello.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// testTmplScriptHtml reads file data from disk. It returns an error on failure.
func testTmplScriptHtml() (*asset, error) {
	path := "/home/gernest/gosrc/src/github.com/gernest/zedlist/templates/test/tmpl/script.html"
	name := "test/tmpl/script.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auth/date_picker.html": authDate_pickerHtml,
	"auth/login.html": authLoginHtml,
	"auth/register.html": authRegisterHtml,
	"base/docs.html": baseDocsHtml,
	"base/docs_index.html": baseDocs_indexHtml,
	"base/home.html": baseHomeHtml,
	"base/jobs.html": baseJobsHtml,
	"base/regions.html": baseRegionsHtml,
	"base/regions_job.html": baseRegions_jobHtml,
	"base/regions_paginate.html": baseRegions_paginateHtml,
	"dash/home.html": dashHomeHtml,
	"dash/jobs_new.html": dashJobs_newHtml,
	"dash/name_form.html": dashName_formHtml,
	"dash/new_job.html": dashNew_jobHtml,
	"dash/profile.html": dashProfileHtml,
	"errors/400.html": errors400Html,
	"errors/404.html": errors404Html,
	"errors/500.html": errors500Html,
	"partials/docs_index.html": partialsDocs_indexHtml,
	"partials/flash.html": partialsFlashHtml,
	"partials/footer.html": partialsFooterHtml,
	"partials/header.html": partialsHeaderHtml,
	"partials/job_list.html": partialsJob_listHtml,
	"partials/regions_list.html": partialsRegions_listHtml,
	"partials/sidenav.html": partialsSidenavHtml,
	"resume/home.html": resumeHomeHtml,
	"resume/update.html": resumeUpdateHtml,
	"resume/view.html": resumeViewHtml,
	"test/base/footer.tpl": testBaseFooterTpl,
	"test/base/header.tpl": testBaseHeaderTpl,
	"test/tmpl/hello.tmpl": testTmplHelloTmpl,
	"test/tmpl/script.html": testTmplScriptHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"auth": &bintree{nil, map[string]*bintree{
		"date_picker.html": &bintree{authDate_pickerHtml, map[string]*bintree{
		}},
		"login.html": &bintree{authLoginHtml, map[string]*bintree{
		}},
		"register.html": &bintree{authRegisterHtml, map[string]*bintree{
		}},
	}},
	"base": &bintree{nil, map[string]*bintree{
		"docs.html": &bintree{baseDocsHtml, map[string]*bintree{
		}},
		"docs_index.html": &bintree{baseDocs_indexHtml, map[string]*bintree{
		}},
		"home.html": &bintree{baseHomeHtml, map[string]*bintree{
		}},
		"jobs.html": &bintree{baseJobsHtml, map[string]*bintree{
		}},
		"regions.html": &bintree{baseRegionsHtml, map[string]*bintree{
		}},
		"regions_job.html": &bintree{baseRegions_jobHtml, map[string]*bintree{
		}},
		"regions_paginate.html": &bintree{baseRegions_paginateHtml, map[string]*bintree{
		}},
	}},
	"dash": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{dashHomeHtml, map[string]*bintree{
		}},
		"jobs_new.html": &bintree{dashJobs_newHtml, map[string]*bintree{
		}},
		"name_form.html": &bintree{dashName_formHtml, map[string]*bintree{
		}},
		"new_job.html": &bintree{dashNew_jobHtml, map[string]*bintree{
		}},
		"profile.html": &bintree{dashProfileHtml, map[string]*bintree{
		}},
	}},
	"errors": &bintree{nil, map[string]*bintree{
		"400.html": &bintree{errors400Html, map[string]*bintree{
		}},
		"404.html": &bintree{errors404Html, map[string]*bintree{
		}},
		"500.html": &bintree{errors500Html, map[string]*bintree{
		}},
	}},
	"partials": &bintree{nil, map[string]*bintree{
		"docs_index.html": &bintree{partialsDocs_indexHtml, map[string]*bintree{
		}},
		"flash.html": &bintree{partialsFlashHtml, map[string]*bintree{
		}},
		"footer.html": &bintree{partialsFooterHtml, map[string]*bintree{
		}},
		"header.html": &bintree{partialsHeaderHtml, map[string]*bintree{
		}},
		"job_list.html": &bintree{partialsJob_listHtml, map[string]*bintree{
		}},
		"regions_list.html": &bintree{partialsRegions_listHtml, map[string]*bintree{
		}},
		"sidenav.html": &bintree{partialsSidenavHtml, map[string]*bintree{
		}},
	}},
	"resume": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{resumeHomeHtml, map[string]*bintree{
		}},
		"update.html": &bintree{resumeUpdateHtml, map[string]*bintree{
		}},
		"view.html": &bintree{resumeViewHtml, map[string]*bintree{
		}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.tpl": &bintree{testBaseFooterTpl, map[string]*bintree{
			}},
			"header.tpl": &bintree{testBaseHeaderTpl, map[string]*bintree{
			}},
		}},
		"tmpl": &bintree{nil, map[string]*bintree{
			"hello.tmpl": &bintree{testTmplHelloTmpl, map[string]*bintree{
			}},
			"script.html": &bintree{testTmplScriptHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

